[
  {
    "objectID": "wrangle.html",
    "href": "wrangle.html",
    "title": "Wrangle Data with {dplyr}",
    "section": "",
    "text": "{dplyr} verbs help you wrangle, clean, and normalize your data\n\n\n\n\n\n\ndplyr function\nuse for\n\n\n\n\nselect()\nsubset columns\n\n\nfilter()\nsubset rows\n\n\narrange()\nsort rows by column variable values\n\n\ngroup_by()\nuse with summarize for subtotals\n\n\nsummarize()\ngenerate column totals and subtotals, etc.\n\n\ncount()\na specialized summarize() function\n\n\n\n\nExamples\nFirst we need to load the {dplyr} package for wrangling and the {readr} package for importing CSV data. In our case, we’ll do that by loading the tidyverse which loads {dplyr}, {readr} and several other helpful packages. Then we need to load our data\n\nlibrary(tidyverse)\nbrodhead_center &lt;- read_csv(\"data/brodhead_center.csv\")\n\n\nselect()\n\nbrodhead_center |&gt; \n  select(name, type)\n\n\n\n  \n\n\n\n\n\n\n\n\nSelect columns\n\n\n\n\nfilter()\n\nbrodhead_center |&gt; \n  filter(menuType == \"dessert\")\n\n\n\n  \n\n\n\n\n\n\n\n\nFilter by rows\n\n\n\n\narrange()\n\nbrodhead_center |&gt; \n  arrange(cost)\n\n\n\n  \n\n\n\n\n\n\n\n\nArrange rows by the values in a column\n\n\n\n\nmutate()\n\nbrodhead_center |&gt; \n  mutate(ratings_high = rating * 2)\n\n\n\n  \n\n\n\n\n\n\n\n\nCreate new variable or modify variable with mutate()\n\n\nWe can also mutate data by groups or categories\n\nbrodhead_center |&gt; \n  mutate(avg_item_rating_rest = mean(rating, na.rm = TRUE), \n         .by = name, \n         .after = name)\n\n\n\n  \n\n\n\n\n\ncount()\n\n\n\n\n\n\n\n  \n    \n      Count values in a group\n    \n    \n    \n      menuType\n      n\n    \n  \n  \n    entree\n24\n    appetizer\n23\n    dessert\n7\n    side\n5\n  \n  \n  \n\n\n\n\nbrodhead_center |&gt; \n  count(menuType)\n\n\n\n  \n\n\n\n\n\ngroup_by() & summarise()\n\n\n\n\n\n\n\n  \n    \n      Summarise column\n    \n    \n    \n      Sum_of_cost\n    \n  \n  \n    412\n  \n  \n  \n\n\n\n\nbrodhead_center |&gt; \n  group_by(name) |&gt; \n  summarise(min_cost = min(cost), mean_cost = mean(cost), max_cost = max(cost))\n\n\n\n  \n\n\n\n\nor\nSummarize by groups, without group_by()\n\nbrodhead_center |&gt; \n  summarise(min_cost = min(cost), .by = name)\n\n\n\n  \n\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by-nc/4.0/"
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "Vizualization with ggplot2",
    "section": "",
    "text": "I only need the ggplot2 package but I like to load tidyverse because it includes 8 complimentary packages, including ggplot2.\n# library(ggplot2)\nlibrary(tidyverse)\nGet more information from:"
  },
  {
    "objectID": "viz.html#ggplot2-template-code",
    "href": "viz.html#ggplot2-template-code",
    "title": "Vizualization with ggplot2",
    "section": "ggplot2 template code",
    "text": "ggplot2 template code\nThe ggplot2 template is used to identify the dataframe, identify the x and y axis, and define visualized layers\n\nggplot(data = ---, mapping = aes(x = ---, y = ---)) + geom_----()\n\nNote: ---- is meant to imply text you supply. e.g. function names, data frame names, variable names.\nIt is helpful to see the argument mapping, above. In practice, rather than typing the formal arguments, code is typically shorthanded to this:\n\ndataframe |&gt;  ggplot(aes(xvar, yvar)) + geom_----()"
  },
  {
    "objectID": "viz.html#goal",
    "href": "viz.html#goal",
    "title": "Vizualization with ggplot2",
    "section": "Goal",
    "text": "Goal\nVisualize a scatter plot showing the relationship of mass to height for Star Wars characters in the dplyr::starwars dataframe, excluding the heaviest character. Indicate a linear regression line."
  },
  {
    "objectID": "viz.html#import-data",
    "href": "viz.html#import-data",
    "title": "Vizualization with ggplot2",
    "section": "Import data",
    "text": "Import data\ndplyr has an on-board dataset, starwars\n\ndata(starwars)\nstarwars"
  },
  {
    "objectID": "viz.html#steps-to-visualization",
    "href": "viz.html#steps-to-visualization",
    "title": "Vizualization with ggplot2",
    "section": "Steps to Visualization",
    "text": "Steps to Visualization\n\nDraw the base layer\nThis feels like, and looks like, you drew an empty box. This is the foundation canvas layer for the resulting visualization.\n\n\n\n\nstarwars %&gt;% \n  ggplot() \n\n\n\n\n\n\nMap the aesthetics to variables in the data frame\nStill doesn’t look like much. {ggplot2} will initialize the plot scales and labels based on the values of the variables in the data frame.\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot(aes(height, mass))\n\n\n\n\nIn the above, I subset the data, removing any Star Wars characters weighing more than 500 Kg – dplyr::filter(). Then I initialized the base layer and map the x-axis to height, and the y-axis to mass. ggplot drew the scales for me.\n\n\nVisualize a layer\nSince I have two numeric variables, height and mass, I’ll start with a scatter plot. Scatter plots are generated by the geom_point() function.\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot(aes(height, mass)) +\n  geom_point() \n\n\n\n\n\n\nGlobal v local arguments\nSo far, the aesthetics are mapped in the aes() function within the initial ggplot function. As such, these values are mapped globally and all layers are affected by this mapping. See the aes() function, above. Arguments can also be mapped locally, within a geom function layer, as as geom_point(aes(height, mass)).\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot() +\n  geom_point(aes(height, mass)) \n\n\n\n\n\n\nMapping v Setting\nDataframe values can be mapped inside the aesthetic, aes(), to visualize variable dataframe values. Alternatively, data values can be set as an argument outside the aes() function but inside the geom_ function. This is done to affect a visual quality that is manually assigned, as opposed to being derived from variable data values.\nAesthetic arguments include:\n\ncolor\nfill\nsize\nlinetype\nopacity\nshape\nand more. See documentation for each geom_ layer.\n\n\nMapping: color is mapped inside aes() function. In this case, color = starwars$gender\n\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot() +\n  # geom_point(mapping = aes(x = height, y = mass, color = gender))\n  geom_point(aes(height, mass, color = gender))\n\n\n\n\nNotice the legend was drawn automatically, above, by mapping an aesthetic\n\nSetting: The color argument can be set outside the aes() function, but within the geom_ function. In this case with color = \"goldenrod\"\n\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot() +\n  geom_point(aes(height, mass), color = \"goldenrod\")"
  },
  {
    "objectID": "viz.html#layers",
    "href": "viz.html#layers",
    "title": "Vizualization with ggplot2",
    "section": "Layers",
    "text": "Layers\n\n\n\n\n\n\nMore layers\n\n\n\nA list of all available geom_ functions, or layers, can be found in the help or on the ggplot2 website\n\n\n\nCommon geom_ functions\n\n\n\nType\nGeom\n\n\n\n\nBar graph:\ngeom_bar() geom_col()\n\n\nHistogram:\ngeom_histogram()\n\n\nScatter plot:\ngeom_point() geom_jitter()\n\n\nLine graph:\ngeom_line()\n\n\nBox plot:\ngeom_boxplot()\n\n\nDensity:\ngeom_density() geom_violin()\n\n\nHeat map:\ngeom_heatmap()\n\n\nMapping:\ngeom_sf()\n\n\nRegression line:\ngeom_smooth()\n\n\n\n\n\nBoxplot\n\nstarwars %&gt;% \n  mutate(species = fct_lump_min(species, 2)) %&gt;% \n  ggplot(aes(species, height)) +\n  geom_boxplot() \n\n\n\n\n\n\nLine graph\n\nbabynames::babynames %&gt;% \n  filter(name == \"Watts\") %&gt;% \n  ggplot(aes(year, n)) +\n  # geom_point() +\n  geom_line()\n\n\n\n\n\n\nOverplotting\nThere are two simple approaches to visualizing overplotted data: geom_jitter() and decrease the opacity be setting the alpha = argument.\n\nAdjust opacity. The alpha argument within the geom function affects the opacity of the points. In this way, overplotted data will appear as darker points on the plot\n\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot() +\n  geom_point(aes(height, mass), alpha = .3)\n\n\n\n\n\nJitter the data with geom_jitter()\n\ngeom_jitter will not change the values of the data but it will offset data points, making it easier to perceive the overplotting.\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot() +\n  geom_jitter(aes(height, mass))\n\n\n\n\n\n\nMultiple layers\nEach layer, visualized by a geom_ function, can support local arguments and draw from the global settings. Below we use the geom_line() function, followed by the geom_point() function.\n# simplified code\nbabynames %&gt;%\n  ggplot(aes(year, prop)) +\n  geom_line(aes(color = sex)) +\n  geom_point(alpha = 0.4, shape = \"cross\")\n\n\nShow the full code\nlibrary(babynames)\nlibrary(ggplot2)\n\nbabynames %&gt;% \n  filter(name == \"John\" & sex == \"M\" | \n           name == \"Elizabeth\" & sex == \"F\") %&gt;% \n  ggplot(aes(year, prop)) +\n  geom_line(aes(color = sex)) +\n  geom_point(alpha = 0.4, shape = \"cross\") +\n  geom_text(data = . %&gt;% filter(year == 1965), aes(label = name),\n            nudge_y = .009) +\n  labs(title = \"Name Popularity\") + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nGoal\nRecall the goal mentioned in the beginning. We want a scatter plot and a regression line. The regression line is drawn with the geom_smooth() function.\n\nstarwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  ggplot(aes(height, mass)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE)"
  },
  {
    "objectID": "viz.html#arrange-order",
    "href": "viz.html#arrange-order",
    "title": "Vizualization with ggplot2",
    "section": "Arrange order",
    "text": "Arrange order\nCategorical values are ordered with the forcats library. Part of the Tidyverse, the forcats package is used to transform string data into the factor data-type. For example, eye colors can be categorized. Brown, blue, and green are nominal categorical values for the factor variable eye_color. Among other things, treating eye_color as a factor data type enables visual ordering of categorical values by frequency.\n\nBefore arranging order\n\nmsleep %&gt;% \n  ggplot(aes(vore)) +\n  geom_bar()\n\n\n\n\n\n\nArranging order with {forcats}\nChange the order of the bars by the frequency of observations using forcats::fct_infreq()\n\nmsleep %&gt;% \n  ggplot(aes(fct_infreq(vore))) +\n  geom_bar() \n\n\n\n\nNotice below, we use the fill = argument to set the color of an individual bar. In the scatter plot examples, above, we used the color = argument. In many geoms_ you can use both color and fill arguments. How do these arguments differ? Where can you look to find out more about fill and color?1\n\nstarwars %&gt;% \n  ggplot(aes(fct_rev(fct_infreq(eye_color)))) +\n  geom_bar(fill = \"grey70\") +\n  geom_bar(data = starwars %&gt;% filter(eye_color == \"orange\"), fill = \"darkorange\") +\n  coord_flip()"
  },
  {
    "objectID": "viz.html#facet-wrap",
    "href": "viz.html#facet-wrap",
    "title": "Vizualization with ggplot2",
    "section": "Facet wrap",
    "text": "Facet wrap\nFaceting is great way to make subplots of the same data frame. See both facet_wrap() and facet_grid()\n\nmpg %&gt;% \n  ggplot(aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(vars(class))"
  },
  {
    "objectID": "viz.html#scales",
    "href": "viz.html#scales",
    "title": "Vizualization with ggplot2",
    "section": "Scales",
    "text": "Scales\nScales are used to affect the visual qualities of the data. Scales help visualize discrete categories by associating each discrete value with a specific color. Read more about scales.\nViridis scales apply color palettes to continuous, discrete, or binned data. For discrete data we can use the scale_fill_viridis_d() function.\n\nBy using one the scale_fill_ functions, we are able to affect the variable values associated in the fill = conservation argument.\n\n\nmy_plot &lt;- msleep %&gt;% \n  ggplot(aes(fct_infreq(vore), sleep_total)) +\n  geom_col(aes(fill = conservation))\n\nmy_plot +\n  scale_fill_viridis_d(na.value = \"grey80\")\n\n\n\n\nThe color brewer palette is similar but has a wider array of palettes to choose from. Below we use scale_fill_brewer() and a default qualitative color palette by setting the type = argument to qual (for qualitative). Alternatively, or additionally, we could assign a palette = argument to choose a particular ColorBrewer palette, such as choosing the “Dark2” palette with the argument palette = \"Dark2\"\n\nmy_plot +\n  scale_fill_brewer(type = \"qual\", na.value = \"grey80\") \n\n\n\n\nSometimes a manual scale is preferred. Below we use scale_fill_manual() to associate a defined set of color names with my fill = conservation argument\n\nmycolors &lt;- c(\"firebrick\", \"forestgreen\", \"navy\", \"darkorange\", \n               \"goldenrod\", \"sienna\")\n\nmy_plot +\n  scale_fill_manual(values = mycolors, na.value = \"grey80\") \n\n\n\n\nTo find available colors: Google search “R color names”, or specific to ColorBrewer….\n\n#display.brewer.pal(7,\"Dark2\")\nRColorBrewer::display.brewer.all()\n\n\n\n\nScales are used to manipulate the visual properties of the data. Beyond using scales to modify colors, another example is logarithmic scales to account for data skew. In this way you can clarify the data pattern. For example, using the ChickWeight dataset, we visualize the weights of the chicks over time. Hint: You can visualize the data skew with a histogram, geom_histogram().\n\ndata(\"ChickWeight\")\n\nChickWeight %&gt;% \n  ggplot(aes(Time, weight, color = Diet)) +\n  geom_line(aes(group = Chick))\n\n\n\n\nUsing scale_y_log10 we can alter the scale to highlight a more understandable data pattern\n\nchicken_plot &lt;- ChickWeight %&gt;% \n  ggplot(aes(Time, weight, color = Diet)) +\n  geom_line(aes(group = Chick)) +\n  scale_y_log10()\nchicken_plot"
  },
  {
    "objectID": "viz.html#labels",
    "href": "viz.html#labels",
    "title": "Vizualization with ggplot2",
    "section": "Labels",
    "text": "Labels\nThe labs() function is a specialized scales function, used to apply labels. For example, use the labs() function to add a title, subtitle, legend title, modify axis labels, and set a caption. See more on scales.\nFirst let’s wrangle a data frame, make a plot, and assign it to an object name\n\nplot_sleep &lt;- msleep %&gt;% \n  mutate(vore = case_when(\n    vore == \"herbi\" ~ \"Herbivore\",\n    vore == \"omni\"  ~ \"Omnivore\",\n    vore == \"carni\" ~ \"Carnivore\",\n    vore == \"insecti\" ~ \"Insectivore\"\n  ))  %&gt;%\n  mutate(my_order = sum(sleep_total), .by = vore) |&gt; \n  summarise(sleep_total = sum(sleep_total, na.rm = TRUE), .by = c(vore, my_order, conservation)) |&gt; \n  ggplot(aes(fct_rev(fct_reorder(vore, my_order)), sleep_total)) +\n  geom_col(aes(fill = conservation)) +\n  scale_fill_brewer(type = \"qual\", na.value = \"grey80\")\n\nNow we can add labels with the labs function\n\nplot_sleep +\n  labs(title = \"Animal sleep times\", \n       subtitle = \"A practice dataset\",\n       fill = \"Conservation\\nType\",\n       x = \"\",\n       y = \"Sleep time in hours\",\n       caption = \"Source: ggplot::msleep\")"
  },
  {
    "objectID": "viz.html#themes",
    "href": "viz.html#themes",
    "title": "Vizualization with ggplot2",
    "section": "Themes",
    "text": "Themes\nThemes are used to manipulate the stylistic characteristics of the non-data components of your plot, such as font faces, text sizes, and grid lines. ProTip: quickly manipulate a single plot with preset themes such as theme_dark, or use a specialized theme extension such as theme_ipsum from the hrbrthemes package.\n\nhttps://ggplot2.tidyverse.org/reference/ggtheme.html\n\nfor example… theme_dark(), theme_light(), theme_classic()\n\nhttps://cinc.rud.is/web/packages/hrbrthemes/\nhttps://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/\n\nSee more on themes\n\nExample themes\n\n\n\nImage source: from R for Data Science by Grolemund & Wickham\n\n\n\n\ntheme_dark()\n\nplot_sleep +\n  theme_dark()\n\n\n\n\n\n\ntheme_classic\n\nplot_sleep +\n  theme_classic()\n\n\n\n\n\n\nhbrthemes\nhttps://cinc.rud.is/web/packages/hrbrthemes/\n\nplot_sleep +\n  hrbrthemes::theme_ipsum(grid = \"Y\") +\n  hrbrthemes::scale_fill_ipsum(na.value = \"grey80\",\n                               labels = c(\"Critical\", \"Domesticated\", \n                                          \"Endangered\", \"Least Concern\", \n                                          \"Threatened\", \"Vulnerable\")) +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "viz.html#combine-plots",
    "href": "viz.html#combine-plots",
    "title": "Vizualization with ggplot2",
    "section": "Combine plots",
    "text": "Combine plots\nThe patchwork package makes it “ridiculously simple to combine separate ggplot objects into the same graphic.” The /will separate plots vertically. The | will separate plots horizontally. See more about patchwork\n\nTry also: (plot_sleep | chicken_plot)\n\n\n# https://patchwork.data-imaginist.com/\nlibrary(patchwork)\n\n(plot_sleep / chicken_plot)"
  },
  {
    "objectID": "viz.html#interactive-plots",
    "href": "viz.html#interactive-plots",
    "title": "Vizualization with ggplot2",
    "section": "Interactive plots",
    "text": "Interactive plots\nUse the ggplotly function will transform your static ggplot object into an interactive plot for use in dashboards and web presentations. ggplotly2 is an example of HTML widgets for R3, an easy to implement approach that will be explained more in the next section.\n\n\n\nlibrary(plotly)\nggplotly(plot_sleep)\n\n\n\n\n\nFor more advanced interactivity we’ll also explore ObservableJS.4"
  },
  {
    "objectID": "viz.html#animate-plots",
    "href": "viz.html#animate-plots",
    "title": "Vizualization with ggplot2",
    "section": "Animate plots",
    "text": "Animate plots\nUse the {gganimate} package to bring your plot to life through the wonders of animation. Learn more at the resource page for gganimate\nFor Example:\n\n\n\n\n\nImage source:  https://gganimate.com/index.html#yet-another-example"
  },
  {
    "objectID": "viz.html#attribution",
    "href": "viz.html#attribution",
    "title": "Vizualization with ggplot2",
    "section": "Attribution",
    "text": "Attribution\nAdapted in whole or in part; based on the Visualize Data with ggplot2 slides by Garrett Grolemund at RStudio which carries the CC BY Garrett Grolemund, RStudio license."
  },
  {
    "objectID": "viz.html#footnotes",
    "href": "viz.html#footnotes",
    "title": "Vizualization with ggplot2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe documentation for each layer. You can find documentation at https://ggplot2.tidyverse.org or in the RStudio IDE by looking in the Files Quadrant &gt; the Help tab.↩︎\nSee Also: the Plotly ggplot2 Library page, and the Interactive web-based data visualization with R, plotly, and shiny book.↩︎\nHTML widgets use JavaScript visualization libraries just by using the R language. The widgets can be embedded into Quarto and R Markdown documents.↩︎\nThrough Quarto you can leverage ObservableJS, an especially interactive application that is perfect for end-user interactive data exploration.↩︎"
  },
  {
    "objectID": "tidymodels.html",
    "href": "tidymodels.html",
    "title": "Tidymodels and machine learning",
    "section": "",
    "text": "The {tidymodels} concept (Kuhn and Silge 2022) is a group of packages in support of modeling and machine learning. In the last section we learned how to manipulate a basic linear model though a combination of the base-R lm() function and the tidyverse {broom} package along with the nest() function. However, modeling can be much more involved. This basic overview introduces tidymodels, a conceptual approach to integrating tidyverse principles with modeling, machine learning, feature selection and tuning.\nBeyond the core of integrating machine learning and modeling with the tidyverse, tidymodels supports a variety of useful analytical and computational approaches. A short list of examples includes statistical analysis (e.g. bootstrapping, hypothesis testing, k-means clustering, logistic regression, etc.), robust modeling (e.g. classification, least squares, resampling), creating performance metrics, tuning, clustering, classification, text analysis, neural networks, and more."
  },
  {
    "objectID": "tidymodels.html#get-started",
    "href": "tidymodels.html#get-started",
    "title": "Tidymodels and machine learning",
    "section": "Get started",
    "text": "Get started\nModelers and ML coders can approach tidymodels by\n\nEngaging with the five-step tutorial (build a model, use recipes to pre-process data, evaluate with resampling, tune, and predict.\nDive deeper to find articles that help apply the tidymodels approach to your needs."
  },
  {
    "objectID": "regression.html",
    "href": "regression.html",
    "title": "Regression",
    "section": "",
    "text": "library(dplyr)\nlibrary(ggplot2)\nlibrary(moderndive)\nlibrary(broom)\nlibrary(skimr)"
  },
  {
    "objectID": "regression.html#load-library-packages",
    "href": "regression.html#load-library-packages",
    "title": "Regression",
    "section": "",
    "text": "library(dplyr)\nlibrary(ggplot2)\nlibrary(moderndive)\nlibrary(broom)\nlibrary(skimr)"
  },
  {
    "objectID": "regression.html#data",
    "href": "regression.html#data",
    "title": "Regression",
    "section": "Data",
    "text": "Data\nData are from the {moderndive} package1, Modern dive (Kim, Ismay, and Kuhn 2021), and the {dplyr} package (Wickham et al. 2023).\n\nevals_ch5 &lt;- evals %&gt;% \n  select(ID, score, bty_avg, age)\n\nevals\n\n\n\n  \n\n\nevals_ch5\n\n\n\n  \n\n\n\n\nevals_ch5 %&gt;% \n  summary()\n\n       ID            score          bty_avg           age       \n Min.   :  1.0   Min.   :2.300   Min.   :1.667   Min.   :29.00  \n 1st Qu.:116.5   1st Qu.:3.800   1st Qu.:3.167   1st Qu.:42.00  \n Median :232.0   Median :4.300   Median :4.333   Median :48.00  \n Mean   :232.0   Mean   :4.175   Mean   :4.418   Mean   :48.37  \n 3rd Qu.:347.5   3rd Qu.:4.600   3rd Qu.:5.500   3rd Qu.:57.00  \n Max.   :463.0   Max.   :5.000   Max.   :8.167   Max.   :73.00  \n\n\n\nskimr::skim(evals_ch5)\n\n\nData summary\n\n\nName\nevals_ch5\n\n\nNumber of rows\n463\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n232.00\n133.80\n1.00\n116.50\n232.00\n347.5\n463.00\n▇▇▇▇▇\n\n\nscore\n0\n1\n4.17\n0.54\n2.30\n3.80\n4.30\n4.6\n5.00\n▁▁▅▇▇\n\n\nbty_avg\n0\n1\n4.42\n1.53\n1.67\n3.17\n4.33\n5.5\n8.17\n▃▇▇▃▂\n\n\nage\n0\n1\n48.37\n9.80\n29.00\n42.00\n48.00\n57.0\n73.00\n▅▆▇▆▁"
  },
  {
    "objectID": "regression.html#correlation",
    "href": "regression.html#correlation",
    "title": "Regression",
    "section": "Correlation",
    "text": "Correlation\n\nstrong correlation\nUsing the cor function to show correlation. For example see the strong correlation between starwars$mass to starwars$height\n\nmy_cor_df &lt;- starwars %&gt;% \n  filter(mass &lt; 500) %&gt;% \n  summarise(my_cor = cor(height, mass))\nmy_cor_df\n\n\n\n  \n\n\n\nThe cor() function shows a positive correlation of 0.7612612. This indicates a positive correlation between height and mass.\n\n\nweak correlation\nBy contrast, see here a regression line that visualizes the weak correlation between evals_ch5$score and evals_ch5$age\n\nevals_ch5 %&gt;% \n  ggplot(aes(score, age)) +\n  geom_jitter() +\n  geom_smooth(method = lm, formula = y ~ x, se = FALSE)"
  },
  {
    "objectID": "regression.html#linear-model",
    "href": "regression.html#linear-model",
    "title": "Regression",
    "section": "Linear model",
    "text": "Linear model\n\n\n\n\n\n\nInterpretation\n\n\n\nFor every increase of 1 unit increase in bty_avg, there is an associated increase of, on average, 0.067 units of score. from ModenDive (Kim, Ismay, and Kuhn 2021)\n\n\n\n# Fit regression model:\nscore_model &lt;- lm(score ~ bty_avg, data = evals_ch5)\n\nscore_model\n\n\nCall:\nlm(formula = score ~ bty_avg, data = evals_ch5)\n\nCoefficients:\n(Intercept)      bty_avg  \n    3.88034      0.06664  \n\n\n\nsummary(score_model)\n\n\nCall:\nlm(formula = score ~ bty_avg, data = evals_ch5)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9246 -0.3690  0.1420  0.3977  0.9309 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  3.88034    0.07614   50.96  &lt; 2e-16 ***\nbty_avg      0.06664    0.01629    4.09 5.08e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5348 on 461 degrees of freedom\nMultiple R-squared:  0.03502,   Adjusted R-squared:  0.03293 \nF-statistic: 16.73 on 1 and 461 DF,  p-value: 5.083e-05"
  },
  {
    "objectID": "regression.html#broom",
    "href": "regression.html#broom",
    "title": "Regression",
    "section": "Broom",
    "text": "Broom\nThe {broom} package is useful for containing the outcomes of some models as data frames. A more holistic approach to tidy modeling is to use the {tidymodels} package/approach\nTidy the model fit into a data frame with broom::tidy(), then we can use dplyr functions for data wrangling.\n\nbroom::tidy(score_model)\n\n\n\n  \n\n\n\nget evaluative measure into a data frame\n\nbroom::glance(score_model)\n\n\n\n  \n\n\n\n\nMore model data\npredicted scores can be found in the .fitted variable below\n\nbroom::augment(score_model)"
  },
  {
    "objectID": "regression.html#example-of-iterative-modeling-with-nested-categories-of-data",
    "href": "regression.html#example-of-iterative-modeling-with-nested-categories-of-data",
    "title": "Regression",
    "section": "Example of iterative modeling with nested categories of data",
    "text": "Example of iterative modeling with nested categories of data\nIn this next example we nest data by the gender category, then iterate over those categories using the {purrr} package to map anonymous functions over our data frames that is nested by our category. Look closely and you’ll see correlations, linear model regression, and visualizations — iterated over the gender category. purr::map iteration methods are beyond what we’ve learned so far, but you can notice how tidy-data and tidyverse principles are leveraged in data wrangling and analysis. In future lessons we’ll learn how to employ these techniques along with writing custom functions.\n\nlibrary(tidyverse)\n\nmy_iterations &lt;- evals |&gt; \n  janitor::clean_names() |&gt; \n  nest(data = -gender) |&gt; \n  mutate(cor_age = map_dbl(data, \\(data) cor(data$score, data$age))) |&gt; \n  mutate(cor_bty = map_dbl(data, \\(data) cor(data$score, data$bty_avg)))  |&gt; \n  mutate(my_fit_bty = map(data, \\(data) lm(score ~ bty_avg, data = data) |&gt; \n                            broom::tidy())) |&gt; \n  mutate(my_plot = map(data, \\(data) ggplot(data, aes(bty_avg, score)) + \n                         geom_point(aes(color = age)) +\n                         geom_smooth(method = lm, \n                                     se = FALSE,\n                                     formula = y ~ x))) |&gt; \n  mutate(my_plot = map2(my_plot, gender, \\(my_plot, gender) my_plot +\n                          labs(title = str_to_title(gender))))\n\nThis generates a data frame consisting of lists columns such as my_fit_bty and my_plot\n```{r}\nmy_iterations\n```\n\n\n\n\n  \n\n\n\nmy_terations$my_fit_bty is a list column consisting of tibble-style data frames. We can unnest those data frames.\n```{r}\nmy_iterations |&gt; \n  unnest(my_fit_bty)\n```\n\n\n\n\n  \n\n\n\nmy_iterations$my_plot is a list column consisting of ggplot2 objects. We can pull those out of the data frame.\n```{r}\nmy_iterations |&gt; \n  pull(my_plot)\n```\n\n\n\n\n\n\nFemale\n\n\n\n\n\n\n\nMale"
  },
  {
    "objectID": "regression.html#next-steps",
    "href": "regression.html#next-steps",
    "title": "Regression",
    "section": "Next steps",
    "text": "Next steps\nThe example above introduces how multiple models can be fitted through the nesting of data. Of course, modeling can be much more complex. A good next step is to gain basic introductions about tidymodels. You’ll gain tips on integrating tidyverse principles with modeling, machine learning, feature selection, and tuning. Alternatively, endeavor to increase your skills in iteration using the purrr package so you can leverage iteration with custom functions."
  },
  {
    "objectID": "regression.html#footnotes",
    "href": "regression.html#footnotes",
    "title": "Regression",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://moderndive.github.io/moderndive/↩︎"
  },
  {
    "objectID": "purrr.html",
    "href": "purrr.html",
    "title": "Iteration with {purrr}",
    "section": "",
    "text": "Review the functions page!\n\n\n\n\n\nIf you have not already read the functions page, do so before reading about {purrr}. The purrr package is about applying functions repetitively. You should have a good idea about what a function is and how to write a custom function.\nFrom the functions page we learned scant definitions of functional programming and functions. We also learned about the special conditions of programming with {dplyr}, which demands a working understanding of environment and data variables.1 Now we want to apply our functions, row-by-row, to a data frame. We’ll use the purrr package.\nRemember that in functional programming we’re iterating, or recursing, without using FOR loops. For example, in the regression page, we saw an example of nesting data frames by category (i.e. by gender). After nesting, we have two subsetted data frames that are embeded within a parent-data-frame. The embedded data frames are contained within a list-column."
  },
  {
    "objectID": "purrr.html#map",
    "href": "purrr.html#map",
    "title": "Iteration with {purrr}",
    "section": "map()",
    "text": "map()\nUsing {purrr} we can apply a function — such as a linear model regression lm() — over each row of the parent data frame. To do this, we use the map_ class of functions. I say class of functions, because purrr::map_ allows us to define the data-type2 returned by the mapped function. For example, sometimes we want to return a character data-type (map_chr), sometimes an integer (map_int), sometimes a data frame (map_df), etc. In the case of a linear model, which is a list data-type, we’ll use the generic map() function to apply an anonymous function.\n\n\n\n\n\n\n\n\n\n\nAnonymous functions\n\n\n\nExamples of an anonymous function:\n\\(x) x + 1\nfunction(x) x + 1\nUnlike the add_numbers() function we composed on the functions page, anonymous functions have no object name. Hence they are anonymous. Anonymous functions, sometimes called lambda functions, are a convenience for coders using functional programming languages.\n\n\n\nmy_subset_df &lt;- evals |&gt; \n  janitor::clean_names() |&gt; \n  nest(my_data = -gender) |&gt; \n  mutate(my_fit_bty = map(my_data, function(my_data) \n                                lm(score ~ bty_avg, data = my_data)\n                         )\n        )\nmy_subset_df\n\n\n\n  \n\n\n\n\nLook at the fitted object\nWhen we look at the resulting my_fit_bty data variable, we see the kind of output we get from lm()\n\nmy_subset_df$my_fit_bty\n\n[[1]]\n\nCall:\nlm(formula = score ~ bty_avg, data = my_data)\n\nCoefficients:\n(Intercept)      bty_avg  \n    3.95006      0.03064  \n\n\n[[2]]\n\nCall:\nlm(formula = score ~ bty_avg, data = my_data)\n\nCoefficients:\n(Intercept)      bty_avg  \n     3.7666       0.1103  \n\n\nEarlier, we learned to use the broom::tidy() function to transform a fitted model — contained as a list data-type — into a data frame.3 For example, we can easily tidy the first model which coerces the list data-type into a data frame.\n\ntidy(my_subset_df$my_fit_bty[[1]])\n\n\n\n  \n\n\n\n\n\nNamed functions\nIf we wanted to tidy all the models — not only the fist model (above) — then we use the map function (again.) This time we map a named function, i.e. broom::tidy(). We do this row-by-row with map(), i.e. without using a FOR loop.\n\nmy_subset_df |&gt; \n  mutate(my_fit_bty_tidy = map(my_fit_bty, tidy))\n\n\n\n  \n\n\n\nA difference between my_fit_bty and my_fit_bty_tidy is that my_fit_bty_tidy is the model output for the former is a list, the later is a data frame. Therefore, the parent data frame — my_subset_df— has a data variable: my_fit_bty_tidy, aka my_subset_df$my_fit_bty_tidy. my_fit_bty_tidy is a list-column of nested data frames, just like my_subset_df$data — which we nested in the first code-chunk of this page as evals$data.\nTo un-nest the data frames, use the unnest() function.\n\nmy_subset_df |&gt; \n  mutate(my_fit_bty_tidy = map(my_fit_bty, tidy)) |&gt; \n  unnest(my_fit_bty_tidy)\n\n\n\n  \n\n\n\nAnd now we have fitted model data, contained as tidy-data, within a data frame, which we can manipulate further with other tidyverse functions. For example, using dplyr functions it’s easy to make a pipeline to look at the p-values of bty_avg, by gender.\n\nmy_subset_df |&gt; \n  mutate(my_fit_bty_tidy = map(my_fit_bty, tidy)) |&gt; \n  unnest(my_fit_bty_tidy) |&gt; \n  select(gender, term, p.value) |&gt; \n  filter(term == \"bty_avg\")\n\n\n\n  \n\n\n\nWhen we combine linear modeling with other broom functions such as glance() and augment(), then we can build on our analysis and data manipulation."
  },
  {
    "objectID": "purrr.html#anonymous-functions-1",
    "href": "purrr.html#anonymous-functions-1",
    "title": "Iteration with {purrr}",
    "section": "Anonymous functions",
    "text": "Anonymous functions\nAnonymous functions have no name. Unlike a named function (e.g. broom::tidy above, or make_scatterplot from the functions page). Below we map an anonymous function within map(). The first argument to map is a list or data frame. The next argument can be a named function or an anonymous function. In the example below, the anonymous function produces a scatter plot with a regression line.\n\nmy_subset_df_with_plots &lt;- my_subset_df |&gt; \n  mutate(my_plot = map(my_data, function(my_data) \n    my_data |&gt; \n      ggplot(aes(bty_avg, score)) + \n      geom_point() +\n      geom_smooth(method = lm, se = FALSE, formula = y ~ x)\n                      )\n         )\nmy_subset_df_with_plots\n\n\n\n  \n\n\n\nAnd now we can pull those plots\n\nmy_subset_df_with_plots |&gt; \n  pull(my_plot)\n\n\n\n\n\n\n\nFemale\n\n\n\n\n\n\n\nMale"
  },
  {
    "objectID": "purrr.html#map2-pmap",
    "href": "purrr.html#map2-pmap",
    "title": "Iteration with {purrr}",
    "section": "map2() & pmap()",
    "text": "map2() & pmap()\nIf you have more than one argument to map, you can use functions such as map2() or pmap(). An example of map2() can be found on the regression page.\n```{r}\n# Example of mapping a anonymous function with two variables.\n\nmap2(my_df, my_plot, gender, function(x, y) { x + labs(title = str_to_title(y)) } )\n\n# x refers to the second argument of map2, i.e. `my_plot`\n\n# y refers to the third argument, i.e. `gender`\n\n```"
  },
  {
    "objectID": "purrr.html#footnotes",
    "href": "purrr.html#footnotes",
    "title": "Iteration with {purrr}",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLinks and footnotes on the functions page will lead to more detailed information on those topics.↩︎\nA fuller explanation of data types can be found in R for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023)↩︎\nHaving our regression model wrapped as a data frame means we can use other {dplyr} functions to more easily manipulate our model output.↩︎"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "R & RStudio, packages, tidyverse",
    "section": "",
    "text": "R and RStudio are not the same thing. Both are open source applications and it is a good idea to have up-to-date installations. As of this writing, the easiest way to find both applications for local download are from the posit.co page. There are cloud versions of RStudio available for the Duke University community at the VCM containers page.\n\n\n\nDownload R and RStudio"
  },
  {
    "objectID": "packages.html#download-r-rstudio",
    "href": "packages.html#download-r-rstudio",
    "title": "R & RStudio, packages, tidyverse",
    "section": "",
    "text": "R and RStudio are not the same thing. Both are open source applications and it is a good idea to have up-to-date installations. As of this writing, the easiest way to find both applications for local download are from the posit.co page. There are cloud versions of RStudio available for the Duke University community at the VCM containers page.\n\n\n\nDownload R and RStudio"
  },
  {
    "objectID": "packages.html#install-r-rstudio-r-packages",
    "href": "packages.html#install-r-rstudio-r-packages",
    "title": "R & RStudio, packages, tidyverse",
    "section": "Install R, RStudio, R packages",
    "text": "Install R, RStudio, R packages\nAfter downloading R and R Studio, it’s time to install each application. I recommend this Interactive tutorial for a guided overview of installing R, RStudio, and packages. A summary of installing packages is below."
  },
  {
    "objectID": "packages.html#packages",
    "href": "packages.html#packages",
    "title": "R & RStudio, packages, tidyverse",
    "section": "Packages",
    "text": "Packages\nIn R, a package is a collection of R functions, and/or data, and/or documentation. R users find and install packages via centralized package-hubs (e.g. Metacran, CRAN, Bioconductor, R-universe, Github) to aid in the specialization and efficiency of R coding.\nPackages can be installed with the install.packages() function. Alternatively, from within RStudio &gt; Packages &gt; install\n\n\n\n\n\n\nInstall packages\n\n\n\n\n\n\n\n\nInstall Once!\n\n\n\nYou only have to install a package once and should avoid putting the install.packages() function in your scripts. Of course, you will need to update packages from time to time.\n\n\n\nLoad packages\nYou should load packages at the top of your script. Write your script, then click the green arrow in the code-chunks; or Run All (Ctrl-Alt-R)\n\n\n\n\n\nLoad packages\n\n\n\n\n\nRun packages"
  },
  {
    "objectID": "packages.html#tidyverse",
    "href": "packages.html#tidyverse",
    "title": "R & RStudio, packages, tidyverse",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\n\nTidyverse is a meta-package of several packages\n\n\nTidyverse (Wickham et al. 2019) is a concept but also a package. When we load the tidyverse we load a meta-package that includes eight other packages. After the command load(tidyverse), there’s no need to also load ggplot2, dplyr, lubridate or any of the packages. Those packages are included. Redundantly, it’s fine to load the same package twice. Check the feedback from the code-chunk to see what is loaded by library(tidyverse).\n\n\ninstall.packages(\"tidyverse\") (do once)   library(tidyverse) (each session)"
  },
  {
    "objectID": "packages.html#quarto-installation",
    "href": "packages.html#quarto-installation",
    "title": "R & RStudio, packages, tidyverse",
    "section": "Quarto installation",
    "text": "Quarto installation\nQuarto comes pre-installed with the latest versions of RStudio. However, if you want to install Quarto again, or for use with VSCode, learn how at Quarto.org\n\n\n\n\n\n\nWhat is Quarto?\n\n\n\n\n\nQuarto is a scientific publishing system. As a next-genderation R Markdown, it offers new features, tight integration, and consistent documentation that make it a better choice for reproducible coding.\nFor example, Quarto can render documents in more output formats than R Markdown, including HTML, PDF, EPUB, and slides. The visual editor makes it easy to combine code, text, and figures in a single document."
  },
  {
    "objectID": "map_import_clean_regex.html",
    "href": "map_import_clean_regex.html",
    "title": "Import multiple Excel files",
    "section": "",
    "text": "The code and companion youtube playlist show practical R/data-wrangling tips and tricks. This case study demonstrates custom functions, regex (regular expressions), and iteration. The workflow shows techniques for common needs such: data-scraping, ingesting multiple files, transforming messy data into tidy data, quickly cleaning column names, separating multivalue fields, uniting variable values, and nesting data."
  },
  {
    "objectID": "map_import_clean_regex.html#playlist",
    "href": "map_import_clean_regex.html#playlist",
    "title": "Import multiple Excel files",
    "section": "Playlist",
    "text": "Playlist"
  },
  {
    "objectID": "map_import_clean_regex.html#code-and-data",
    "href": "map_import_clean_regex.html#code-and-data",
    "title": "Import multiple Excel files",
    "section": "Code and data",
    "text": "Code and data\nGithub ▶️ libjohn/workshop_rfun/iterate"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "R/Tidyverse/Quarto - get started",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "interactive.html",
    "href": "interactive.html",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "",
    "text": "This is a very basic example of displaying an interactive visualization using ObservableJS. Use the drop-down box to test how the plots and tables are reactive to user input."
  },
  {
    "objectID": "interactive.html#transpose-to-arquero",
    "href": "interactive.html#transpose-to-arquero",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Transpose to arquero",
    "text": "Transpose to arquero\nBehind the scenes, when rendering this report, I use {r} code-chunks to import and wrangle the data. I’m importing and wrangling my data with a quarto-friendly code language. Then I transpose my data frame into an OJS object.\n\n```{ojs}\n//| echo: fenced\nmy_data = aq.from(transpose(trade_df_ojs))\nmy_survey = aq.from(transpose(my_df_tall_ojs))\n```"
  },
  {
    "objectID": "interactive.html#simplified-example",
    "href": "interactive.html#simplified-example",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Simplified example",
    "text": "Simplified example\n\nbasic\nThe next code-chunk shows a very simple example of ObservableJS {Plot} code for visualization. This example is not interactive but it demonstrates the remarkable similarity to {ggplot2} syntax.\nplot\n\n```{ojs}\n//| echo: fenced\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(my_data_wrangled, {\n      x: \"date\",\n      y: \"sales\",\n      stroke: \"business\"\n    }),\n  ]\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n↥ Look up!\n\n\n\nNotice the crispness and clarity of the simple non-interactive plot above. Observable Plot shows well on the web!"
  },
  {
    "objectID": "interactive.html#arquero-data-wrangling",
    "href": "interactive.html#arquero-data-wrangling",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Arquero data wrangling",
    "text": "Arquero data wrangling\n\nDerive date\nAside from the {dplyr} wrangling that I did in the background of this code notebook, I still needed to parse the date fields. Arquero to the rescue.\nArquero! Now what is that? Observable JavaScript is its own coding language and we can minimize the learning curve by keeping our data wrangling within our favorite coding language R. This way we can focus on using the {Plot} grammar and syntax that is very similar to {ggplot2} – see the above example. However, Observable JS is a complete and rich language of its own. So, just like {shiny}, we want to learn just enough to get the job done. That said, there is a case where a little more data wrangling is optimal. This is where {arquero} comes in. Arquero is used for data wrangling and is easy to learn because it was inspired by {dplyr}. Show the code for the first plot on this page and you’ll see the similarity to {dplyr}.\nBelow we can coerce a data-type for the my_data$date vector by transforming a character data-type to a date data-type using Arquero’s .derive() function. Arquero’s .derive() function is similar to dplyr::mutate()\n\n\n```{ojs}\n//| echo: fenced\nmy_data_wrangled = my_data\n  .derive({  date: d =&gt;  op.parse_date(d.date) })\n```\n\n\n\n\n\n\nOn this page, we use both {r} and {ojs} code chunks within one Quarto notebook. This shows how to present useful interactivity in a multilingual coding context.\n\nimport { aq, op } from '@uwdata/arquero'\n// aq = import('https://esm.run/arquero') \n// op = import('https://esm.run/arquero')"
  },
  {
    "objectID": "interactive.html#examples-and-documentation",
    "href": "interactive.html#examples-and-documentation",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Examples and documentation",
    "text": "Examples and documentation\nSee a very cool demo at the Quarto-Observable introduction page. Learn more about this exciting option at the Quarto-Observable JS Guide."
  },
  {
    "objectID": "import.html",
    "href": "import.html",
    "title": "Import Data",
    "section": "",
    "text": "Did you start with a Project?\n\n\n\nReproducibility starts at the foundation! Always begin by opening a project. See New Projects for tips.\nWe recommend entering your code in code-chunks within coding notebooks.\nIn this workshop we recommend the Tidyverse approach to learning and using R\nBelow are some of the core tidyverse packages that are loaded with the function: library(tidyverse)."
  },
  {
    "objectID": "import.html#data-import-wizard",
    "href": "import.html#data-import-wizard",
    "title": "Import Data",
    "section": "Data import wizard",
    "text": "Data import wizard\nThe data import wizard is a quick and easy way to import your data\n\n\n\nImport dataset\n\n\nIt’s actually way better to follow the reproducible steps – and hardly any more effort – below…"
  },
  {
    "objectID": "import.html#load-library-packages",
    "href": "import.html#load-library-packages",
    "title": "Import Data",
    "section": "Load library packages",
    "text": "Load library packages\nOpen a Quarto document, Insert a code-chunk (Ctrl-Alt-I) and copy the following code. Then execute the code. You may first have to install the tidyverse-package if you have not already1.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "import.html#import-data",
    "href": "import.html#import-data",
    "title": "Import Data",
    "section": "Import data",
    "text": "Import data\nIn RStudio, in the Files quadrant and tab, click the data folder, then left-click the brodhead_center.csv file. Using the context menu, choose the Import Dataset… option. Once inside the data wizard, you can copy the code int he code-preview window, then paste the code into the code chunk of your quarto document or r script.\n\n\n\n\n# library(readr)\nbrodhead_center &lt;- read_csv(\"data/brodhead_center.csv\")\n# view(brodheadCenter)\n\n\n\n\n\n\n\nComposing the data import code…\n\n\n\nWriting the import data function can be tricky. Try the import wizard pictured above. THEN, paste the code from the Code Preview section into your script.\n\n\n\nEasily write import data function"
  },
  {
    "objectID": "import.html#excel-spss-sas-etc.",
    "href": "import.html#excel-spss-sas-etc.",
    "title": "Import Data",
    "section": "Excel, SPSS, SAS, etc.",
    "text": "Excel, SPSS, SAS, etc.\nThe data import wizard will help you find the proper package for importing your data. For example, use…\n\nlibrary(readxl) for Excel data\nlibrary(haven) for SPSS, SAS, Stata\nlirary(readr) for CSV or other delimeters\n\nJust start with File &gt; Import Dataset to get started composing that code, then paste your code into a script."
  },
  {
    "objectID": "import.html#look-at-the-data-object",
    "href": "import.html#look-at-the-data-object",
    "title": "Import Data",
    "section": "Look at the data object",
    "text": "Look at the data object\nNow that you’ve assigned the output from the read_csv function to the name brodhead_center, simply call that object name in a code chunk.\n\nbrodhead_center"
  },
  {
    "objectID": "import.html#visualize-your-data-with-ggplot2",
    "href": "import.html#visualize-your-data-with-ggplot2",
    "title": "Import Data",
    "section": "Visualize your data with {ggplot2}",
    "text": "Visualize your data with {ggplot2}\nHere’s a quick teaser on visualizing data. Read more in the visualization chapter.\n\nbrodhead_center |&gt; \n  ggplot(aes(x = name, y = cost)) +\n  geom_boxplot() \n\n\n\n\n\nbrodhead_center |&gt; \n  filter(name != \"Tandoor\") |&gt; \n  ggplot(aes(x = rating, y = cost)) +\n  geom_jitter(aes(color = name))\n\n\n\n\n\n\nShow the code\nbrodhead_center |&gt; \n  drop_na(rating, cost, name) |&gt; \n  filter(name != \"Tandoor\") |&gt; \n  ggplot(aes(x = factor(rating), y = cost)) +\n  geom_tile(aes(fill = name), alpha = .3) +\n  scale_y_continuous(label = scales::dollar) +\n  scale_fill_brewer(palette = \"Dark2\") + \n  labs(x = \"rating\", y = NULL, title = \"Heatmap: cost over ratings\", \n       caption = \"Source: https://github.com/data-and-visualization/Intro2R\",\n       fill = \"Restaurant name\") +\n  theme_classic() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "import.html#footnotes",
    "href": "import.html#footnotes",
    "title": "Import Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn R, a package is a collection of R functions, and/or data, and/or documentation. R users find and install packages via centralized package-hubs (e.g. Metacran, CRAN, Bioconductor, R-universe, Github) to aid in the specialization and efficiency of R coding.↩︎"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis packages",
    "section": "",
    "text": "EDA, or Exploratory Data Analysis can take many forms. This brief section will recommend a few packages which can be used to explore your data, more or less, automagically. The packages can be complex and may take some effort to learn. However, if you’re brand new to data mining, you may benefit from reading these package documentation pages, and then applying their functions to your data.\nRecommended EDA packages\n\n{skimr} - https://docs.ropensci.org/skimr\na frictionless approach to summary statistics\n{corrplot} - https://github.com/taiyun/corrplot\na visual exploratory tool on correlation matrix that supports automatic variable reordering\n{summarytools} - https://github.com/dcomtois/summarytools\nor data cleaning, exploring, and simple reporting\n{tableone} - https://github.com/kaz-yos/tableone\ncreate “Table 1”, description of baseline characteristics\n{dtracker} - https://terminological.github.io/dtrackr\nAccurate documentation of a data pipeline is a first step to reproducibility, and a flow chart describing the steps taken to prepare data\n\n\n\n\nReusehttps://creativecommons.org/licenses/by-nc/4.0/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is hosted by the Center for Data & Visualization Sciences, part of the Duke University Libraries. composed in the RStudio IDE, as R code authored as a Quarto notebooks. With Quarto it is easy to render multiple report formats such as a PDF document or this website. In this case the report format is a web site hosted gratis at netlify.\nThe code for this workshop and this webpage are all part of a single RStudio project that can be found in a GitHub repository. The code-along exercises for this workshop are in the GitHub repository but they are not part of the web site. You can work through the exercises by first downloading the GitHub repository. Then find the exercises within the _exercises directory.\nYou can find an outline for this workshop. For more information or resource on learning R, please also visit the Rfun learning series."
  },
  {
    "objectID": "about.html#misc",
    "href": "about.html#misc",
    "title": "About",
    "section": "Misc",
    "text": "Misc\n\n\n\n\n\n\nEarlier version of a package?\n\n\n\n\n\nremotes::install_version(\"knitr\", \"1.42\")"
  },
  {
    "objectID": "ai.html",
    "href": "ai.html",
    "title": "Getting started with ai-assisted LLMs",
    "section": "",
    "text": "Ai-assisted coding tools such as OpenAI’s ChatGPT, Google’s Bard, and GitHub’s Copilot can be a used in code generation, code completion, and learning to code. R-specific approaches to assisted coding are convenient and available through RStudio addins such as {gptstudio}."
  },
  {
    "objectID": "ai.html#quick-start",
    "href": "ai.html#quick-start",
    "title": "Getting started with ai-assisted LLMs",
    "section": "Quick Start",
    "text": "Quick Start\nBing Chat1 can access openAI’s ChatGPT where you must use the MSEdge browser. Google Bard works in any browser. Another option is poe.com. Poe is especially useful for experimenting with a variety of Large Language Models (LLM) including ChatGPT, Google-PaLM (Bard), Sage, and Claude. Each of the options mentioned above are provided free of charge.2\nBelow is from the Bard LLM when asked for advice on learning to code with ai-assited LLMs:\n\n\nBe specific in your requests\nUse clear and concise language\nProvide examples\nBe patient\nUse a variety of LLMs and experiment with different approaches\nUse LLMs as a supplement to other learning resources\nVerify your computational results\n\n\nSee Also: the warning, above, and the ethics section, below."
  },
  {
    "objectID": "ai.html#tools-or-packages",
    "href": "ai.html#tools-or-packages",
    "title": "Getting started with ai-assisted LLMs",
    "section": "Tools or packages",
    "text": "Tools or packages\nAside from the websites mentioned in the Quick Start section above, there are many approaches to integrating AI-assistance directly into an IDE such as RStudio or VSCode. These addins, or plugins, are highlighted for their seemless integration in a coding IDE.\n\ngptstudio\nThe gptstudio can reference a variety of LLMs defaulting to ChatGPT. A big advantage to {gptstudio} is the ability to stay within the RStudio IDE, interacting seemlessly with notebooks or plain script files. From the Addins menu, get assistance writing code, or checking spelling and grammar. A companion package {gpttools} can extend {gptstudio}.\n\nPreequisites\n\nOpenAI account\nOpenAI API key (requires a credit card but may not require payment)\nSet the API key in RStudio environment. For security, if using version control (such as GitHub), include the .Renviron in the .gitignore file\n\nSetup details are explained at gptstudio. Pricing seems exceedingly low as of this writing but there are no garauntees. The API allows coder to set cost limits.\n\n\n\nRTutor\nThere is a website or a package for integrating into RStudio. Does not require an API key, but paying your way is appreciated. This is a tutor designed to help teach about ai-assisted coding and learn about exploring datasets. A subsection of RTutor automatically runs datasets through various EDA packages.\n\n\nGithub Copilot\nDefaults to OpenAI’s codex LLM based on code found in GitHub. This tools is focused on code completion rather than conceptual computational thinking. Must use the VSCode IDE, an IDE with similarities to the RStudio IDE."
  },
  {
    "objectID": "ai.html#comparisons-of-models",
    "href": "ai.html#comparisons-of-models",
    "title": "Getting started with ai-assisted LLMs",
    "section": "Comparisons of models",
    "text": "Comparisons of models\ngptstudio: Great for its deep integration into RStudio and ability to work within code-chunks or prose. Setting up the API key is a necessary configuration. The {gptstudio} documentation shows clearly how to protect API-keys linked to a credit card — a notable issue when using version control like GitHub.\nBard/PaLM: Google’s LLM. Fast, efficient and familiar.\nPoe.com: Easy access to several LLM models: ChatGPT, PaLM, GPT-4, Claude, and Sage. Works well. Comparison of LLM responses is convenient. Log-out is found in the settings page.\nChatGPT: OpenAI’s LLM. This works well. Free website can slow down due to user congestion limits. Subscription models exist, presumably with less congestion.\nCopilot: OpenAI’s codex LLM focused on code completion. In my experience copilot is less useful in understanding conceptual questions about computational data analysis. Uses the VSCode IDE; a nice app that works with many coding languages including R. VSCode also works with Quarto. The R set-up in VSCode is a bit cranky. If you’re a Pythonite, VSCode set-up is more convenient than R. If you’re an R coder, you might be happy sticking with RStudio.\n\nSummary comparison\nBard/PaLM and ChatGPT (via addins, poe.com, bing.com, or openai.com) have worked well in my tests. There seem to be some usage-congession limitations, especially if you don’t subscribe. See also the tips at the top of this page about using using LLMs for assisted coding."
  },
  {
    "objectID": "ai.html#ethics",
    "href": "ai.html#ethics",
    "title": "Getting started with ai-assisted LLMs",
    "section": "Ethics",
    "text": "Ethics\nLLMs knowledge bases are private and lack transparency. There are important societal concerns about the fairness of equitable access to these tools. It’s unclear how developers or users of these models can be held accountable."
  },
  {
    "objectID": "ai.html#footnotes",
    "href": "ai.html#footnotes",
    "title": "Getting started with ai-assisted LLMs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAt the time this sentence was composed Bing Chat is using ChatGPT4.↩︎\nFree but possibly rate limited as of the date-time this sentence was composed.↩︎"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions in R",
    "section": "",
    "text": "R is a functional programming language.1 This means repetitive execution is emphasized without using FOR loops.2 No FOR loops‽ How is that possible? Basically, coders focus on applying the same operation, row by row, over a data frame — without toiling over the syntax of For loops.\nIf you’re new to R, you may not realize that you’ve been using functions throughout this workshop series. All the packages we introduced (dplyr, ggplot2, skimr, and even base-R, etc.) are made up collections of functions. For example, {dplyr} gives us the filter() and the select() functions. At the end of the section on regression, we saw an example of using the nest() function so our data frame is set for the repetition of our regression (the lm() function) row-by-row. We did this without ever writing a FOR loop."
  },
  {
    "objectID": "functions.html#definition",
    "href": "functions.html#definition",
    "title": "Functions in R",
    "section": "Definition",
    "text": "Definition\n\n\n\n\n\n\nFunctions\n\n\n\nBlocks of code that can be invoked by the coder to perform fundamental steps.\n\n\nFunctions can accept inputs and yield outputs. If we put a string of functions together we have a more complex function. We may want to apply this complex function to some group of data till we reach the end. In R the basic syntax of a function looks like this\n\n\n\n\n```{r}\n\n# Define function to add two numbers\nadd_numbers &lt;- function(x, y) { x + y }\n\n```\nThen we can call that function like this\n```{r}\nadd_nubmers(8, 10)\n```\nThe console will return a response, or we can store that response in an object. Or we can combine that function with the mutate function and iterate over all the rows in a data frame\n\nlibrary(tidyverse)\n\nadd_numbers &lt;- function(x, y) {\n  x + y\n}\n\nstarwars |&gt; \n  mutate(my_product = add_numbers(mass, height), .after = mass)\n\n\n\n  \n\n\n\nWhile the custom function, add_numbers, didn’t save us much time. We can create more sophisticated functions. For example, we can write a function that plots x and y.\nThe function, below, uses indirection syntax (i.e. double-braces) because there’s a difference between an environment variable and a data variable. An explanation of indirection is found in the enthusiastically recommended Programming with dplyrvignette. Essentially, an environment variable shows up in the RStudio environment tab. While a data variable is the name of a variable within an environment variable. For example, in a data frame, a column header variable name is a data variable. Data variables have to be called with the embrace operator {{so that they data can be referenced indirectly. This indirection overcomes a data masking feature which allows for more efficient coding in many cases.\n\nEssentially, ease of coding is emphasised with data masking. This data masking makes it easier to learn R. As a beginner there are fewer syntactical barriers when coding in a tidyverse context. The paradox of this early simplicity comes at the cost of more complex syntax when composing complex functions. This syntactical complexity occurs because data-masked variables need to be referred to indirectly.\n\nmake_scatterplot &lt;- function(my_df, my_x, my_y, my_color) {\n  my_df |&gt;\n    drop_na() |&gt;\n    ggplot(aes(x = {{my_x}}, y = {{my_y}})) +\n    geom_point(aes(color = {{my_color}})) +\n    geom_smooth(method = lm, se = FALSE, formula = y ~ x)\n}\n\nmake_scatterplot(starwars, height, mass, gender)\nmake_scatterplot(mpg, displ, hwy, class)\n\n\n\n\n\n\nPlot 1\n\n\n\n\n\n\n\nPlot 2\n\n\n\n\n\n\n\n\n\n\n\n\nRule of thumb\n\n\n\nIf you have to write the same code three times or more, write a function. Among the advantages, this prevents typographical errors. Additionally, writing functions can prevent mistakes in coding because there will be fewer places to update."
  },
  {
    "objectID": "functions.html#can-it-be-simpler",
    "href": "functions.html#can-it-be-simpler",
    "title": "Functions in R",
    "section": "Can it be simpler?",
    "text": "Can it be simpler?\nIn a word, yes, but there may be limitations. In the section on pivoting data, we saw how pivoting data to the tall format made it easier to generate multiple {ggplot2} plots. We combine pivoting with the facet_wrap() function to visualize multiple plots with minimal coding. While we didn’t write a special custom function, we did use the functional programming approach to iterate over rows of a data frame. Without pivoting the data and faceting the plots, this code might have taken ten-times as much code, most of it repetitive and all of it susceptible to typing mistakes.\n\ninc_levels = c(\"Don't know/refused\",\n               \"&lt;$10k\", \"$10-20k\", \"$20-30k\", \"$30-40k\",\n               \"$40-50k\", \"$50-75k\", \"$75-100k\", \"$100-150k\",\n               \"&gt;150k\")\n\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  mutate(religion = fct_lump_n(religion, 4, w = count)) %&gt;% \n  mutate(income = fct_relevel(income, inc_levels)) %&gt;% \n  summarise(sumcount = sum(count), .by = c(religion, income)) %&gt;% \n  ggplot(aes(fct_reorder(religion, sumcount), \n             sumcount)) + \n  geom_col(fill = \"grey80\", show.legend = FALSE) +\n  geom_col(data = . %&gt;% filter(income == \"$40-50k\"),\n           fill = \"firebrick\") +\n  geom_col(data = . %&gt;% filter(income == \"&gt;150k\"),\n           fill = \"forestgreen\") +\n  coord_flip() +\n  facet_wrap(vars(income), nrow = 2)"
  },
  {
    "objectID": "functions.html#mapping-over-a-data-frame",
    "href": "functions.html#mapping-over-a-data-frame",
    "title": "Functions in R",
    "section": "Mapping over a data frame",
    "text": "Mapping over a data frame\nBut how do we apply functions, row-by-row, over a data frame without using FOR loops? Move to the section on iteration with {purrr}"
  },
  {
    "objectID": "functions.html#footnotes",
    "href": "functions.html#footnotes",
    "title": "Functions in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://en.wikipedia.org/wiki/Functional_programming↩︎\nhttps://en.wikipedia.org/wiki/For_loop↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R workshop - get started",
    "section": "",
    "text": "Let’s learn R"
  },
  {
    "objectID": "index.html#first-steps",
    "href": "index.html#first-steps",
    "title": "R workshop - get started",
    "section": "First steps",
    "text": "First steps\n\nTour of your Local File System\n\nR / RStudio\nClone code from GitHub\n\nStart a new project by importing the github repository for this workshop\n\nhttps://github.com/data-and-visualization/Intro2R.git\n\nOpen the import.qmd notebook-file from the Files tab in the RStudio IDE"
  },
  {
    "objectID": "index.html#download-project-data-and-code",
    "href": "index.html#download-project-data-and-code",
    "title": "R workshop - get started",
    "section": "Download Project (data and code)",
    "text": "Download Project (data and code)\nAll data and code are readily available for this workshop.\n\nData\nWhenever possible on-board datasets are used. Therefore, you may not have to load any data at all. For most of the data you only to load a library. For example the starwars dataset is part of the {dplyr} package — library(dplyr) to access the starwars data frame. Alternatively, you can access the data with the fully verbose package::function syntax — dplyr::starwars.\nSome data sets are imported via the read_csv function and you can download the data and code from github (See GitHub icon; right-hand side of this webpage header), expand the zipped file. You’ll find a data folder with CSV files used in this workshop. Refer to the import page for tips on importing data.\n\n\nCode\nYou can download the data and code from github (See GitHub icon; right-hand side of this webpage header), expand the zipped file. Double click the Intro2R.Rproj file to launch all of the code directly into an RStudio project.\n\n\n\n\n\nDownload zipped code from GitHub\n\n\nOr\nUse this link to the GitHub repo,\n\nClick the green code button\nDownload ZIP\nUnzip and double click the Intro2R.Rproj file"
  },
  {
    "objectID": "index.html#pipes-and-assignment",
    "href": "index.html#pipes-and-assignment",
    "title": "R workshop - get started",
    "section": "Pipes and Assignment",
    "text": "Pipes and Assignment\nSome coding syntax is unique in R and the Tidyverse. You will see these symbols frequently.\n\n\n\n\n\n\n\n\n\n&lt;- Assignment - “gets value from”\n\n\n\nBy convention we use two assignment symbols when creating object names\n\n&lt;- typically used at the beginning of a pipeline or function\n= typically used within the mutate function\n\nKeystroke:\nAlt-dash\nExample:\nmy_vector &lt;- c(2, 4, 6:9)\n\n\n\n\n\n\n\n\n%&gt;% Pipes and pipelines - “and then”\n\n\n\nWe can create data sentences, or pipelines, by chaining many functions together from left to right.\nThere are at least three main pipe symbols\n\n|&gt; or %&gt;%\n+ only used in ggplot2 pipelines\n\nKeystroke:\nCtrl-shift-M or Cmd-shift-M\nExample:\ncars |&gt; select(speed)"
  },
  {
    "objectID": "index.html#more-workshops",
    "href": "index.html#more-workshops",
    "title": "R workshop - get started",
    "section": "More workshops",
    "text": "More workshops\nThis workshop and many others covering topics in data science, visualization, mapping and GIS, and data management are hosted each semester by the Center for Data and Visualization Sciences (CDVS). All workshops are recorded with shareable code, data, slides and recordings. You can find the R-specific resources at our Rfun site. Meanwhile, all CDVS workshop materials are available at our online learning page — including duplicates of the R materials found at Rfun."
  },
  {
    "objectID": "join.html",
    "href": "join.html",
    "title": "Join two data frames",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "join.html#join",
    "href": "join.html#join",
    "title": "Join two data frames",
    "section": "Join",
    "text": "Join\nThere are a series of join commands\n\nleft_join, inner_join, right_join, full_join,\nsemi_join, anti_join\n\n\n\n\n{dplyr} joins visualized in venn diagrams\n\n\nFirst let’s import the favorability ratings data from fivethirtyeight.com"
  },
  {
    "objectID": "join.html#data",
    "href": "join.html#data",
    "title": "Join two data frames",
    "section": "data",
    "text": "data\nThese exercises use the following ggplot2 training datasets\n\ndplyr::starwars\nData from fivethrityeight.org (modified)\n\n\nfav_ratings &lt;- read_csv(\"data/538_favorability_popularity.csv\", skip = 11)\nfav_ratings\n\n\n\n  \n\n\n\n\nstarwars\n\n\n\n  \n\n\n\nJoin on a key that is common across two data frames. For best results use a numeric key that promotes precision. Unfortunately our data frames do not have a numeric key to use as our join key. We’ll use an alphabetic key, name, and this will highlight what can go wrong. along with troubleshooting strategies.\nThe name variable is the key because it is common to both tables: fav_ratings and starwars.\n\n\n\n\nfav_ratings  |&gt;  \n  left_join(starwars, by = join_by(name))  |&gt; \n  arrange(desc(fav_rating))\n\n\n\n  \n\n\n\n\nanti_join\nanti_join will determine data values that are in the left table and not the right table.\n\nanti_join(fav_ratings, starwars) |&gt; arrange(name)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\nanti_join(starwars, fav_ratings) |&gt; arrange(name)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\n\n\n\nsemi_join or inner_join\nJoin only the rows that match.\n\nfav_ratings |&gt; \n  semi_join(starwars)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\n\n\n\nRegex\nRegular expressions (regex) and {stringr} can be handy when manipulating character variables into join keys. We use regex when troubleshooting what is not matching. In other computatons we might also use regex for more sophisticated text manipulations, specifically for finding patterns in text.\n\nstr_detect()\nstr_to_lower()\nstr_remove()\nstr_trim()\nstr_extract()\n\n\n\n\n\nstarwars %&gt;% \n  filter(str_detect(name, \n                    regex(\"3p|palpatine|obi|amidala|leia|d2\", \n                          ignore_case = TRUE))) %&gt;% \n  arrange(name)\n\n\n\n  \n\n\n\n\nfav_ratings %&gt;% \n  filter(str_detect(name, \n                    regex(\"3p|palpatine|obi|amidala|leia|d2\", \n                          ignore_case = TRUE))) %&gt;% \n  arrange(name)"
  },
  {
    "objectID": "join.html#see-also",
    "href": "join.html#see-also",
    "title": "Join two data frames",
    "section": "See Also",
    "text": "See Also\n\ndplyr::bind_rows()\ndplyr::bind_cols()"
  },
  {
    "objectID": "longer_wider.html",
    "href": "longer_wider.html",
    "title": "Pivot",
    "section": "",
    "text": "Often our goal is to reshape a data frame into a tidy data (Wickham 2014) format. This is also known as tall data or long data. The {tidyr} package has functions to reshape data into tall or wide formats. When coding in the tidyverse context, tall data is much easier to iterate over — without ever writing for loops or other kind of flow control. Later, in the advance section, we’ll introduce the {purrr} package for more powerful iteration.\nTidy data1\nMany of the {dplyr} functions help with making data tidy. Additionally, in this chapter, we focus on using the {tidyr} function: pivot_longer, as well as pivot_wider.\nSee Also the Pivot Vignette"
  },
  {
    "objectID": "longer_wider.html#load-library-packages",
    "href": "longer_wider.html#load-library-packages",
    "title": "Pivot",
    "section": "Load library packages",
    "text": "Load library packages\nLoad the {tidyverse} meta package which loads eight packges, including {tidyr}.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "longer_wider.html#data",
    "href": "longer_wider.html#data",
    "title": "Pivot",
    "section": "Data",
    "text": "Data\nOur practice datasets are now available.\n\ndata(relig_income)\ndata(fish_encounters)"
  },
  {
    "objectID": "longer_wider.html#longer",
    "href": "longer_wider.html#longer",
    "title": "Pivot",
    "section": "Longer",
    "text": "Longer\n\npivot_longer()\n\n\n\n\nWe can start with the tidyr::relig_income data frame. This is wide data and does not conform to tidy data (Wickham 2014) principles. This makes it harder to iterate by row because there are multiple observations in each row. In this data frame, each row has 10 observations, one observation for each income category.\n\nrelig_income\n\n\n\n  \n\n\n\nWe can pivot this to tall data (i.e. pivot_longer) so that we have one observation per row for a total of 180 rows.\n\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\")"
  },
  {
    "objectID": "longer_wider.html#wider",
    "href": "longer_wider.html#wider",
    "title": "Pivot",
    "section": "Wider",
    "text": "Wider\nOf course, sometimes we want wide data. There are a variety of reasons to wrangle data into a wide-data format. We use pivot_wider to accomplish this.\n\nfish_encounters\n\n\n\n  \n\n\n\n\nfish_encounters %&gt;% \n  pivot_wider(names_from = station, values_from = seen)"
  },
  {
    "objectID": "longer_wider.html#why-pivot-data",
    "href": "longer_wider.html#why-pivot-data",
    "title": "Pivot",
    "section": "Why pivot data?",
    "text": "Why pivot data?\nWhy pivot data? Your analysis may require the shape of data to match a particular structure. For example, ggplot generally prefers long tidy data. Once the data are properly shaped, analysis and variations becomes easier. Below is a quick example of using ggplot to format data in a long and tidy shape to create a bar plot. Of course, the plot needs some refining. Hence, improvements become easier to accomplish with the tall data shape. Nonetheless, below shows an initial draft of a bar plot.\n\n\nCode\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  ggplot(aes(religion, count, fill = income)) +\n  geom_col()\n\n\n\n\n\nOnce the data are properly shaped, variations on analysis becomes easier. Next, I format some variables as categorical vectors (i.e. factors), so that I can redraw the plot for clarity.\nMy goal is to format the vectors as factors using the forcats package. This will allow me to arrange\n\nthe order of the bars\nthe order of the stacked elements of each bar\nthe order of the Legend\n\nI will also change the color scheme of the discrete color from the fill argument, in combination with the scale_fill_viridis_d function.\n\n\nCode\ninc_levels = c(\"Don't know/refused\",\n               \"&lt;$10k\", \"$10-20k\", \"$20-30k\", \"$30-40k\",\n               \"$40-50k\", \"$50-75k\", \"$75-100k\", \"$100-150k\",\n               \"&gt;150k\")\n\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  mutate(income = fct_relevel(income, inc_levels)) %&gt;% \n  ggplot(aes(fct_reorder(religion, count), \n             count, fill = fct_rev(income))) +\n  geom_col() +\n  scale_fill_viridis_d(direction = -1) +\n  coord_flip() \n\n\n\n\n\nNonetheless, the un-pivoted, wide data, can be subset and visualized even though this is not ideal when attempting more complex visualization variations. Here, un-pivoted, I will make a bar chart of religious affiliation for incomes between $40k and $50k. Since I’m using just one variable, the code is not hard to compose. But note, the data re not in a tidy-data format.\n\n\nCode\nrelig_income %&gt;% \n  ggplot(aes(fct_reorder(religion, `$40-50k`), `$40-50k`)) +\n  geom_col() + \n  coord_flip()\n\n\n\n\n\nTidy, pivot_longer, data will be easier to manipulate with ggplot2. For example, You can subset the data with a single filter function, thereby more easily enabling different income charts. Below, the code is easier to read and easier to modify if I want to use a different income value.\n\nfilter(income == \"$40-50k\")\n\n\n\nCode\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  filter(income == \"$40-50k\") %&gt;% \n  ggplot(aes(fct_reorder(religion, count), count)) +\n  geom_col() +\n  coord_flip() \n\n\n\n\n\nGetting more complex, a natural step is to make comparisons across incomes. To do this we use ggplot2::facet_wrap()\n\n\nCode\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  mutate(income = fct_relevel(income, inc_levels)) %&gt;% \n  ggplot(aes(fct_reorder(religion, count), \n             count)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  facet_wrap(vars(income), nrow = 2)\n\n\n\n\n\nAnother variation. Again, ggplot2 affordances are easier to leverage with tall data.\n\n\nCode\nrelig_income %&gt;%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %&gt;% \n  mutate(religion = fct_lump_n(religion, 4, w = count)) %&gt;% \n  mutate(income = fct_relevel(income, inc_levels)) %&gt;% \n  group_by(religion, income) %&gt;%\n  summarise(sumcount = sum(count)) %&gt;% \n  ggplot(aes(fct_reorder(religion, sumcount), \n             sumcount)) + \n  geom_col(fill = \"grey80\", show.legend = FALSE) +\n  geom_col(data = . %&gt;% filter(income == \"$40-50k\"),\n           fill = \"firebrick\") +\n  geom_col(data = . %&gt;% filter(income == \"&gt;150k\"),\n           fill = \"forestgreen\") +\n  coord_flip() +\n  facet_wrap(vars(income), nrow = 2)"
  },
  {
    "objectID": "longer_wider.html#footnotes",
    "href": "longer_wider.html#footnotes",
    "title": "Pivot",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA robust discussion of tidy data can be found in R for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023): https://r4ds.had.co.nz/tidy-data.html↩︎"
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "Two-day R data-science workshop",
    "section": "",
    "text": "What is R\n\ndata-first programming/coding language\nextend R with domain-specific packages. See: MetaCran, CRAN, github, bioconductor\n\nWhat is the Tidyverse\nWhat is Tidy data\nReproducibility: data-first tools help leverage reproducible workflows throughout computational thinking\n\nblank-slate instead of .Rdata\nRestart instead of rm(list = ls())\nIntentional use of the RStudio projects feature\nVersion Control: git and GitHub\n{renv} for archiving/documenting package environments\n\nTool suite\n\nRStudio\nQuarto Notebooks (Merge literate coding with report rendering)\n{dplyr} & {tidyr} - a grammar for data wrangling\n{ggplot2} - a grammar of graphics\nOther packages e.g. {readr}, {forcats}, {stringr}, {purrr}, {tidymodels}\n\nConsole\n\nbasic computation\nvectors and vectorized math\nenvironment variables and data variables\nassignment variables: &lt;- and = (not the same as equivalency ==)\npipes = |&gt; and %&gt;%\n\nRStudio Projects\n\nuse projects instead of setwd() ; relative paths are vital to reproducibility\nDocuments: Quarto document\n\nImport CSV data\n\nread_csv() and the data import wizard found in Files tab and Environment tab\nOther data formats\n\n{readxl}, {haven}\n\nSQL\n\nCode-chunks can perform SQL\n{dbplyr}\nBest Practices with Databases\n\nExercise\n\nimport a CSV file\nimport a Stata categorical file using {haven}\n\n\n{dplyr}\n\nselect(), filter(), arrange(), mutate(), group_by(), summarize(), count()\nExercise\nSemantic meaning in data \nCodebooks in a literate coding context\n\n\n\n\n\n\n\n\n{ggplot2} viz\n\nExercise\n\nbasic interactivity - ggplotly()\n\nExercise\n\n{broom} and handling modeling outputs (e.g. linear regression)\n\nAdvertise {tidymodels}\nExercise\n\n{skimr} and EDA \n\nskim()\nReprise group_by() and summarize() \n\n{tidyr} pivot_longer() and pivot_wider()\n\nTall data - what is it?\nTall data for iteration: computation \nTall data for visualization , facet_wrap()\nTall data for modeling ; {purrr} a first look.\n\njoin with dplyr::left_join() or other {dplyr} join functions\nWrap-up and Summarize the day"
  },
  {
    "objectID": "outline.html#day-one",
    "href": "outline.html#day-one",
    "title": "Two-day R data-science workshop",
    "section": "",
    "text": "What is R\n\ndata-first programming/coding language\nextend R with domain-specific packages. See: MetaCran, CRAN, github, bioconductor\n\nWhat is the Tidyverse\nWhat is Tidy data\nReproducibility: data-first tools help leverage reproducible workflows throughout computational thinking\n\nblank-slate instead of .Rdata\nRestart instead of rm(list = ls())\nIntentional use of the RStudio projects feature\nVersion Control: git and GitHub\n{renv} for archiving/documenting package environments\n\nTool suite\n\nRStudio\nQuarto Notebooks (Merge literate coding with report rendering)\n{dplyr} & {tidyr} - a grammar for data wrangling\n{ggplot2} - a grammar of graphics\nOther packages e.g. {readr}, {forcats}, {stringr}, {purrr}, {tidymodels}\n\nConsole\n\nbasic computation\nvectors and vectorized math\nenvironment variables and data variables\nassignment variables: &lt;- and = (not the same as equivalency ==)\npipes = |&gt; and %&gt;%\n\nRStudio Projects\n\nuse projects instead of setwd() ; relative paths are vital to reproducibility\nDocuments: Quarto document\n\nImport CSV data\n\nread_csv() and the data import wizard found in Files tab and Environment tab\nOther data formats\n\n{readxl}, {haven}\n\nSQL\n\nCode-chunks can perform SQL\n{dbplyr}\nBest Practices with Databases\n\nExercise\n\nimport a CSV file\nimport a Stata categorical file using {haven}\n\n\n{dplyr}\n\nselect(), filter(), arrange(), mutate(), group_by(), summarize(), count()\nExercise\nSemantic meaning in data \nCodebooks in a literate coding context\n\n\n\n\n\n\n\n\n{ggplot2} viz\n\nExercise\n\nbasic interactivity - ggplotly()\n\nExercise\n\n{broom} and handling modeling outputs (e.g. linear regression)\n\nAdvertise {tidymodels}\nExercise\n\n{skimr} and EDA \n\nskim()\nReprise group_by() and summarize() \n\n{tidyr} pivot_longer() and pivot_wider()\n\nTall data - what is it?\nTall data for iteration: computation \nTall data for visualization , facet_wrap()\nTall data for modeling ; {purrr} a first look.\n\njoin with dplyr::left_join() or other {dplyr} join functions\nWrap-up and Summarize the day"
  },
  {
    "objectID": "outline.html#day-two",
    "href": "outline.html#day-two",
    "title": "Two-day R data-science workshop",
    "section": "Day Two",
    "text": "Day Two\n\nPart 3 Iteration and custom functions\n\nQuestions from yesterday\nR is a functional programming language\n\nWhat is functional programing?\n\nCustomizing functions and iterating without FOR loops\n\nFOR loops?\nTidyverse preference for data frames\n\nVectorized math (review)\n\nVectorized iteration ; environment variables and data variables\n\nCase study - import multiple data files + data cleaning + analysis + visualization\n\nread_csv() again\n\nIntroduce {stringr} and regular expressions\nSome nifty data wrangling functions\nComposing custom functions\nNesting data for iteration\n\n\n\n\n\nPart 4 Review, questions, case study, reports\n\nQuestions / Review\nSetup case study\nUsing R to orchestrate data workflows\nReproducible report rendering (slides, PDF, dashboards, etc.)\nSummarize\nFinding help"
  },
  {
    "objectID": "outline.html#resources",
    "href": "outline.html#resources",
    "title": "Two-day R data-science workshop",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science: book | slack\nTidyverse primers\nRStudio IDE &gt; Help &gt; [ Documentation | Forum | Cheatsheets | Shortcuts ] & on-board Help tab\n\nRStudio User Guide\n\nTidyverse webpages: {package_name}.tidyverse.org (e.g. ggplot2.tidyverse.org)\nInteractivity\n\nHTMLWidgets\nObservableJS\nShiny"
  },
  {
    "objectID": "outline.html#recommendations",
    "href": "outline.html#recommendations",
    "title": "Two-day R data-science workshop",
    "section": "Recommendations",
    "text": "Recommendations\n\nBlank slate\nUse the Projects in the RStudio IDE\nUse version control (git and GitHub)\nUse {renv} for package reproducible environments\nUse mybinder.org for sharing containers in a reproducible/replicable state"
  },
  {
    "objectID": "proj.html",
    "href": "proj.html",
    "title": "Projects",
    "section": "",
    "text": "R and RStudio are not the same thing — they go together\n\n\n\nR is a coding language interpreter. RStudio is an Integrated Development Environment (IDE) used to make it easier to interact with the coding language.\n\n\nThe projects feature of R helps keep projects and ideas discrete and establish a reproducible workflow. It is easier to share code across installations with projects, such as using relative file paths or other coding hygiene practices.\n\n\n\n\n\n\n\nRStudio Projects\n\n\n\nLook in the upper-right corner of your RStudio IDE. Or, File &gt; New Projects\nChoose between New, Existing, or Version Control.\nIf you choose a New project, there are several options for project types. Personally, I like starting with Quarto Website. However Quarto Project2 is a more generic setup. You can also choose Quarto Blog or Quarto Book.\n\n\n\n\n\n\nNew Quarto project\n\n\n\n\n\nNew Quarto Document\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch between projects\n\n\n\nBy clicking the upper-right hand corner of your project name, you’ll be able to easily switch between projects."
  },
  {
    "objectID": "proj.html#rstudio-projects1",
    "href": "proj.html#rstudio-projects1",
    "title": "Projects",
    "section": "",
    "text": "R and RStudio are not the same thing — they go together\n\n\n\nR is a coding language interpreter. RStudio is an Integrated Development Environment (IDE) used to make it easier to interact with the coding language.\n\n\nThe projects feature of R helps keep projects and ideas discrete and establish a reproducible workflow. It is easier to share code across installations with projects, such as using relative file paths or other coding hygiene practices.\n\n\n\n\n\n\n\nRStudio Projects\n\n\n\nLook in the upper-right corner of your RStudio IDE. Or, File &gt; New Projects\nChoose between New, Existing, or Version Control.\nIf you choose a New project, there are several options for project types. Personally, I like starting with Quarto Website. However Quarto Project2 is a more generic setup. You can also choose Quarto Blog or Quarto Book.\n\n\n\n\n\n\nNew Quarto project\n\n\n\n\n\nNew Quarto Document\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch between projects\n\n\n\nBy clicking the upper-right hand corner of your project name, you’ll be able to easily switch between projects."
  },
  {
    "objectID": "proj.html#settings-in-rstudio-preferences",
    "href": "proj.html#settings-in-rstudio-preferences",
    "title": "Projects",
    "section": "Settings in RStudio preferences",
    "text": "Settings in RStudio preferences\nFurther recommendations on reproducibility suggest setting the following global preferences.\n\n\n\n\n\nGlobal options &gt; General\n\n\n\n\n\nGlobal options &gt; Code\n\n\n\n\n\n\n\n\n\nTools &gt; Global options\n\n\n\nUncheck\n\nRestore most recently opened project (uncheck)\nRestore previously open source document (uncheck)\nRestore .Rdata (uncheck)\nSave workspace to .RData to NEVER\nAlways save history (uncheck)\n\n\nRead more about the blank slate approach to reproducibility using the RStudio IDE."
  },
  {
    "objectID": "proj.html#reproducibility",
    "href": "proj.html#reproducibility",
    "title": "Projects",
    "section": "Reproducibility",
    "text": "Reproducibility\nA reproducible approach to computing ensures that all documents are readily available and facilitates the execution and re-execution of computations to achieve identical results.3\n\n\n\n\n\nReproducibility pyramid (Little and Lafferty-Hess, 2023)\n\n\n\nTwo of the most basic principles in reproducibility are…\n\nDo everything with code\nRender documents from code\n\n\nDeveloping computation techniques to honor reproducibility principles means, whenever possible, reduce or eliminate mouse-clicks and hard-to-document copy/paste steps. We do this because such actions are barriers for ourselves and others when it comes to re-executing code.\nUsing a coding language such as R, along with a report rendering scheme such as Quarto, is an ideal way to ensure the reproducibility of your analysis and publications. Reproducibility is further enhanced by leveraging literate coding (Knuth 1984), tidy data (Wickham 2014), and tidyverse principles (Wickham et al. 2019).\nBuilding computation upon this foundations increases the chances of archiving your work for posterity. When we look back at the computational workflows of the nineteen seventies through the early two-thousands, we see the natural problems and evolution of solutions that now lead us to good reproducible technique."
  },
  {
    "objectID": "proj.html#archiving-dependencies-with-renv",
    "href": "proj.html#archiving-dependencies-with-renv",
    "title": "Projects",
    "section": "Archiving dependencies with {renv}",
    "text": "Archiving dependencies with {renv}\n“The renv package helps create reproducible environments for your R projects.” {renv}4\n\n{renv} is a new effort to bring project-local R dependency management to your projects. The goal is for renv to be a robust, stable replacement for the {packrat} package, with fewer surprises and better default behaviors.5"
  },
  {
    "objectID": "proj.html#version-control-and-code-repositories",
    "href": "proj.html#version-control-and-code-repositories",
    "title": "Projects",
    "section": "Version Control and Code Repositories:",
    "text": "Version Control and Code Repositories:\nTools for reproducibility, collaboration, documentation, and backup\nVersion control6 is the practice of tracking and managing changes to files and projects over time. Code repositories7 are platforms for storing, managing, and sharing code. Researchers can use these tools to improve the reproducibility, collaboration, documentation, and backup of their research.\nFor example, version control can be used to track changes to a computational model, allowing researchers to easily revert to previous versions of the project if necessary. Code repositories can be used to share code with collaborators, making it easier to work together on projects.\nVersion control and code repositories can also be used to document the development process, which can help future researchers who want to build on the work. Additionally, code repositories can be used to create backups of code and data, which can help protect against data loss."
  },
  {
    "objectID": "proj.html#research-artifacts",
    "href": "proj.html#research-artifacts",
    "title": "Projects",
    "section": "Research artifacts",
    "text": "Research artifacts\nStoring, sharing, and citing your work.\nArchival data repositories8 are different from code repositories in that they aim to preserve research milestones as an artifact. This can include a published article, the code and data used to produce the article, and any other relevant materials.\nMeanwhile, Code repositories (mentioned above), are more focused on current workflows, and they are often used to store and share code that is used in research projects.\nLinking code and data repositories can be helpful for researchers who want to ensure the reproducibility and posterity of their work. By linking the two repositories, researchers can make it easy for others to find and access the code and data that they used to produce their results.\nFor example, Referencing and citing your reproducible artifacts, data, and computational workflow is easily accomplished with GitHub (a code repository) and Zenodo (a data repository). Using the techniques described, the two repositories can be easily linked and synchronized. This means that any major versions or milestones in GitHub will be automatically imported into Zenodo, where they will be given a Digital Object Identifier (DOI).\nA DOI is a unique identifier that can be used to cite research artifacts. This makes it easy for others to find and reference your work."
  },
  {
    "objectID": "proj.html#footnotes",
    "href": "proj.html#footnotes",
    "title": "Projects",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://support.posit.co/hc/en-us/articles/200526207-Using-Projects↩︎\nRead more about each of the special subtypes of RStudio projects. https://quarto.org/docs/projects/quarto-projects.html↩︎\nhttps://en.wikipedia.org/wiki/Reproducibility↩︎\nSee {renv} at https://rstudio.github.io/renv. See Also a discussion virtual environments at this Quarto page, including details on venv, conda, and renv.↩︎\nIntroduction to renv / Kevin Ushey↩︎\nAn example of a version control application is git. While git has a notoriously curmudgeonly user-interface, RStudio integrates with git and improves upon the interface. This makes version control especially useful in a scholarly-publishing/computational-thinking context.↩︎\nFor example: GitHub and GitLab (public site | Duke University Instance) are examples of web-based code-repositories.↩︎\nFor example: Zenodo.org is a free and open-source platform for sharing research data and code.↩︎"
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "Start coding",
    "section": "",
    "text": "After installing R, RStudio, and the Tidyverse packages, you’re ready to send commands to the R-interpreter."
  },
  {
    "objectID": "quarto.html#console",
    "href": "quarto.html#console",
    "title": "Start coding",
    "section": "Console",
    "text": "Console\n\n\n\nR console quadrant in RStudio\n\n\n\n\nA very simple way to code is to send commands directly to the console (bottom-left quadrant in RStudio). For example: in the RStudio console, type cars — then hit the enter key.\nThis approach is convenient but not very reproducible."
  },
  {
    "objectID": "quarto.html#notebooks---recomended",
    "href": "quarto.html#notebooks---recomended",
    "title": "Start coding",
    "section": "Notebooks - RECOMENDED",
    "text": "Notebooks - RECOMENDED\nWe recommend using Quarto Documents. This provides a visual notebook where coders blend code with prose, then render publishable documents from the quarto-document. Another option is R Markdown documents; R Markdown is the predecessor to Quarto.\n\n\n\n\n\nSample Quarto Document\n\n\nThe basic steps are\n\nBegin new Quarto document (File &gt; New file &gt; Quarto document)\nCompose explanation of goals and code-chunks using natural language (i.e. prose)\nAdd code-chunks (Ctrl-Alt-i) to compose code. (intersperse code-chunks with prose)\nRender document into a publishable report1\n\n\nRecommended Quarto links\n\nQuarto tutorial (Includes step-by-step hello.qmd document: from authoring to rendering )\nQuarto FAQ for R Markdown users\nQuarto example publication types. Plus guides and deep-references docs"
  },
  {
    "objectID": "quarto.html#scripts---plain-vanilla",
    "href": "quarto.html#scripts---plain-vanilla",
    "title": "Start coding",
    "section": "Scripts - plain vanilla",
    "text": "Scripts - plain vanilla\nYou can also code the old fashion way using a plain vanilla .R script.2"
  },
  {
    "objectID": "quarto.html#footnotes",
    "href": "quarto.html#footnotes",
    "title": "Start coding",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMany report formats are available including: PDF, MS Word, Slides, PPTX, HTML, EPUB, Web sites, Blogs, Interactive interfaces.↩︎\nFile &gt; New file &gt; R script. There is no mandate to join the twenty-first century and honor academic values like reproducibility, such as rendering reports from code. You do you. I don’t judge 😃↩︎"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "R for Lunch: schedule",
    "section": "",
    "text": "In this series we’ll learn to use R for reproducible computational thinking. Each one-hour session builds upon the last. Sessions will be in-person; recordings released at a later date (TBD).\nAttendees will use their personal laptops. Preparation: The R application, RStudio, the Tidyverse, and Quarto will be installed, in advance, by attendees. (Instructions will be available.)"
  },
  {
    "objectID": "schedule.html#schedule",
    "href": "schedule.html#schedule",
    "title": "R for Lunch: schedule",
    "section": "Schedule",
    "text": "Schedule\n\nGetting started: import data, data wrangling\nThursday - 8/31/23 ; 12:30pm. Register for location.\nLearn how to import data following a brief tour of the RStudio IDE and an introduction to coding notebooks. Five essential {dplyr} data wrangling verbs are introduced and a sample visualization is presented.\n\n\nData wrangling with dplyr\nFriday - 9/1/23 ; 12:30. Register for location.\nWe explore the five essential {dplyr} data wrangling verbs. We demonstrate and apply data pipes inside code-chunks within coding notebooks, which were discussed in the previous session.\n\n\nVisualization with ggplot2\nFriday - 9/8/23 ; 12:30. Register for location.\nWe visualize data by leveraging previously discussed reproducible coding techniques, including the {dplyr} verbs. We apply the grammar of graphics to our coding workflow.\n\n\nCoding with ChatGPT\nFriday - 9/15/23 ; 12:30. Register for location.\nAi-assisted coding can improve efficiency. Learn a few basics about Large Language Models (LLMs); LLMs can help and sometimes bedevil us. Discover which LLMs work best with R. Techniques and add-ins are shared to save time and learn more.\n\n\nTidy data, pivot, join, and iteration (part 1)\nFriday - 9/22/23 ; 12:30. Register for location.\nBuilding on the last session and our goal of efficiency, we create strategies to avoid LLM barriers. Begin to engage the power of functional programming as applied in the tidy-data context.\n\n\nFunctions & {purrr}; iteration part2\nFriday - 9/22/23 ; 12:30. Register for location.\nFOR loops? Maybe FOR loops are a bit dated. Let’s surf past the next level and apply custom functions to larger quantities of data while using fewer coding steps.\n\n\nRegression and tidymodels\nFriday - 10/6/23 ; 1:30. Register for location.\nR is a great tool for academic computational workflow and R is borne from the statistics discipline. Wading only ankle deep, we learn computation techniques for modeling. Please note: this is not a refresher workshop on picking or interpreting models. This is a workshop on efficient syntax to apply models."
  },
  {
    "objectID": "tidy_tuesday_itra.html",
    "href": "tidy_tuesday_itra.html",
    "title": "Example EDA",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nBasic steps taken in this rough exploration of data….\nA brief discussion of packages which proport to perform EDA for you can be found in the Get Started section of this site.\nNote: This page is not intended to teach formal EDA. What happens on this page is merely a brutal re-enactment of some informal explorations that a person might take as they familiarize themselves with new data. If you’re like most people, you might want to skip to the visualizations. Meanwhile, the sections and code-chunks preceding visualization are worth a glance."
  },
  {
    "objectID": "tidy_tuesday_itra.html#import-data",
    "href": "tidy_tuesday_itra.html#import-data",
    "title": "Example EDA",
    "section": "Import data",
    "text": "Import data\nThe data come from a TidyTuesday, a weekly social learning project dedicated to gaining practical experience with R and data science. In this case the TidyTuesday data are based on International Trail Running Association (ITRA) data but inspired by Benjamin Nowak, . We will use the TidyTuesday data that are on GitHub. Nowak’s data are also available on GitHub.\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …"
  },
  {
    "objectID": "tidy_tuesday_itra.html#eda-with-skimr",
    "href": "tidy_tuesday_itra.html#eda-with-skimr",
    "title": "Example EDA",
    "section": "EDA with skimr",
    "text": "EDA with skimr\n\nskim(race_df)\n\n\nData summary\n\n\nName\nrace_df\n\n\nNumber of rows\n1207\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nDate\n1\n\n\ndifftime\n1\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nevent\n0\n1.00\n4\n57\n0\n435\n0\n\n\nrace\n0\n1.00\n3\n63\n0\n371\n0\n\n\ncity\n172\n0.86\n2\n30\n0\n308\n0\n\n\ncountry\n4\n1.00\n4\n17\n0\n60\n0\n\n\nparticipation\n0\n1.00\n4\n5\n0\n4\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n2012-01-14\n2021-09-03\n2017-09-30\n711\n\n\n\nVariable type: difftime\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nstart_time\n0\n1\n0 secs\n82800 secs\n05:00:00\n39\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrace_year_id\n0\n1\n27889.65\n20689.90\n2320\n9813.5\n23565.0\n42686.00\n72496.0\n▇▃▃▂▂\n\n\ndistance\n0\n1\n152.62\n39.88\n0\n160.1\n161.5\n165.15\n179.1\n▁▁▁▁▇\n\n\nelevation_gain\n0\n1\n5294.79\n2872.29\n0\n3210.0\n5420.0\n7145.00\n14430.0\n▅▇▇▂▁\n\n\nelevation_loss\n0\n1\n-5317.01\n2899.12\n-14440\n-7206.5\n-5420.0\n-3220.00\n0.0\n▁▂▇▇▅\n\n\naid_stations\n0\n1\n8.63\n7.63\n0\n0.0\n9.0\n14.00\n56.0\n▇▆▁▁▁\n\n\nparticipants\n0\n1\n120.49\n281.83\n0\n0.0\n21.0\n150.00\n2900.0\n▇▁▁▁▁\n\n\n\n\n\nRead more about automagic EAD packages."
  },
  {
    "objectID": "tidy_tuesday_itra.html#freewheelin-eda",
    "href": "tidy_tuesday_itra.html#freewheelin-eda",
    "title": "Example EDA",
    "section": "Freewheelin’ EDA",
    "text": "Freewheelin’ EDA\n\nrace_df |&gt; \n  count(country, sort = TRUE) |&gt; \n  filter(str_detect(country, regex(\"Ke\", ignore_case = TRUE)))\n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  filter(country == \"Turkey\")\n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  count(participation, sort = TRUE)\n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  count(participants, sort = TRUE)\n\n\n\n  \n\n\n\n\nskim(rank_df)\n\n\nData summary\n\n\nName\nrank_df\n\n\nNumber of rows\n137803\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nrunner\n0\n1.00\n3\n52\n0\n73629\n0\n\n\ntime\n17791\n0.87\n8\n11\n0\n72840\n0\n\n\ngender\n30\n1.00\n1\n1\n0\n2\n0\n\n\nnationality\n0\n1.00\n3\n3\n0\n133\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrace_year_id\n0\n1.00\n26678.70\n20156.18\n2320\n8670\n21795\n40621\n72496\n▇▃▃▂▂\n\n\nrank\n17791\n0.87\n253.56\n390.80\n1\n31\n87\n235\n1962\n▇▁▁▁▁\n\n\nage\n0\n1.00\n46.25\n10.11\n0\n40\n46\n53\n133\n▁▇▂▁▁\n\n\ntime_in_seconds\n17791\n0.87\n122358.26\n37234.38\n3600\n96566\n114167\n148020\n296806\n▁▇▆▁▁\n\n\n\n\n\n\nrank_df |&gt; \n  filter(str_detect(nationality, regex(\"ken\", ignore_case = TRUE)))\n\n\n\n  \n\n\n\n\nrank_df |&gt; \n  arrange(rank)\n\n\n\n  \n\n\nrank_df |&gt; \n  count(rank, sort = TRUE)\n\n\n\n  \n\n\nrank_df |&gt; \n  drop_na(rank) |&gt; \n  count(rank, gender, age, sort = TRUE)\n\n\n\n  \n\n\nrace_df |&gt; \n  count(distance, sort = TRUE)\n\n\n\n  \n\n\n\n\nrank_df |&gt; \n  filter(race_year_id == 41449)\n\n\n\n  \n\n\nrace_df |&gt; \n  filter(race_year_id == 41449)\n\n\n\n  \n\n\nrace_df |&gt; \n  filter(distance == 161)\n\n\n\n  \n\n\n\n\nrace_df\n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  count(race, city, sort = TRUE)\n\n\n\n  \n\n\nrace_df |&gt; \n  filter(race == \"Centurion North Downs Way 100\")\n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  filter(race_year_id == 68140)\n\n\n\n  \n\n\nrace_df |&gt; \n  filter(race == \"Millstone 100\")\n\n\n\n  \n\n\nrace_df |&gt; \n  filter(event == \"Peak District Ultras\")\n\n\n\n  \n\n\nrace_df |&gt; \n  count(race, sort = TRUE)  \n\n\n\n  \n\n\nrace_df |&gt; \n  count(city, sort = TRUE)  \n\n\n\n  \n\n\nrace_df |&gt; \n  count(event, sort = TRUE)  \n\n\n\n  \n\n\n\n\nrace_df |&gt; \n  filter(event == \"Burning River Endurance Run\")"
  },
  {
    "objectID": "tidy_tuesday_itra.html#visualize-wrangle-and-summarize",
    "href": "tidy_tuesday_itra.html#visualize-wrangle-and-summarize",
    "title": "Example EDA",
    "section": "Visualize, wrangle, and summarize",
    "text": "Visualize, wrangle, and summarize\nHere I’m using this State of Ultra Running report as a model to demonstrate some of the capabilities of R / Tidyverse\n\njoin datasets\n\nJoin, Assign, and Pipe\nIn this case I want to join the two data frames rank_df and race_df using the left_join() function.\nI can assign the output of a “data pipe” (i.e. data sentence) to use in subsequent code-chunks. A common R / Tidyverse assignment operator is the &lt;- characters. You can read this as “gets value from”.\nAdditionally, I’m using a pipe operator (|&gt;) as a conjunction to connect functions. In this way I can form a data sentence. Many people call the data sentence a data pipe, or just a pipe. You may see another common pipe operator: %&gt;%. \\&gt; and %&gt;% are synonymous.\nusing dplyr::left_join() I combine the two data sets and then use {ggplot2} to create a line graph of participants by year.\n\nmy_df_joined &lt;- rank_df |&gt; \n  left_join(race_df, by = \"race_year_id\") |&gt;\n  mutate(my_year = lubridate::year(date))\n\n\n\n\nViz participants\nLet’ make a quick line plot showing how many people participate in races each year. Here we have a date field this is also a date data-type. Data types are important and in this example using a data data-type means {ggplot2} will simplify our x-axis labels.\nHere we use the {lubridate} package to help manage my date data-types. We also use {ggplot2} to generate a line graph as a time series via the {ggplot2} package and a geom_line() layer. Note that {ggplot2} uses the ‘+’ as the conjunction or pipe.\n\nrank_df |&gt; \n  left_join(race_df |&gt; select(race_year_id, date), by = \"race_year_id\") |&gt;\n  mutate(my_year = lubridate::year(date)) |&gt; \n  count(my_year, sort = TRUE) |&gt; \n  ggplot(aes(my_year, n)) +\n  geom_line()\n\n\n\n\n\n\nby distance\nHere I use count() in different ways to see what I can see. I comment out each attempt before settling on summarizing a table of total country participants by year.\n\nmy_df_joined |&gt; \n  mutate(participation = str_to_lower(participation)) |&gt; \n  # count(participation, sort = TRUE)\n  # count(city) |&gt; \n  # count(race) |&gt; \n  count(my_year, country, sort = TRUE)\n\n\n\n  \n\n\nmy_df_joined |&gt; \n  mutate(participation = str_to_lower(participation)) |&gt; \n  count(my_year, country, sort = TRUE) |&gt; \n  drop_na(country) |&gt; \n  mutate(country = fct_lump_prop(country, prop = .03)) |&gt; \n  ggplot(aes(my_year, n)) +\n  geom_line(aes(color = country))\n\n\n\n\n\n\nby country\nI used fct_lump_prop() in the previous code-chunk to lump the country variable into categories by frequency. Here we refine the categories into specific levels. We are still mutating the country variable as a categorical factor; this time using the fct_other() function of {forcats} with some pre-defined levels (see the my_levels vector in the code-chunk below).\n\nmy_levels &lt;- c(\"United States\", \"France\", \"United Kingdom\", \"Spain\")\n\nmy_df_joined |&gt; \n  mutate(country = fct_other(country, keep = my_levels)) |&gt; \n  count(my_year, country, sort = TRUE) |&gt; \n  drop_na(country) |&gt; \n  ggplot(aes(my_year, n, color = country)) +\n  geom_line() +\n  geom_point() +\n  scale_color_brewer(palette = \"Dark2\") \n\n\n\n\n\n\nCountry race-host\n\nmy_df_joined |&gt; \n  drop_na(country) |&gt; \n  mutate(country = fct_lump_n(country, n = 7)) |&gt;\n  count(country, sort = TRUE) |&gt; \n  ggplot(aes(x = n, y = fct_reorder(country, n))) +\n  geom_col()\n\n\n\n\n\n\nNationality of runner\n\nmy_df_joined |&gt; \n  mutate(nationality = fct_lump_n(nationality, n = 7)) |&gt; \n  count(nationality, sort = TRUE) |&gt; \n  ggplot(aes(n, fct_reorder(nationality, n))) +\n  geom_col()\n\n\n\n\n\n\nUnique participants\n\nmy_df_joined |&gt; \n  distinct(my_year, runner) |&gt; \n  count(my_year) |&gt; \n  ggplot(aes(my_year, n)) +\n  geom_line()\n\n\n\n\n\n\nParticipant frequency separated by gender\nNote the use of count, if_else, as.character, and group_by to transform the data for visualizing. Meanwhile, the visual bar graph is a proportional graph with the y-axis label by percentage. We do this by manipulating the plot scales. Scales are also used to choose colors from a predefined palette (i.e. “Dark2”.) Findally, we facet the plot by gender (See facet_wrap()).\n\nmy_df_joined |&gt; \n  count(my_year, gender, runner, sort = TRUE) |&gt; \n  mutate(n_category = if_else(n &gt;= 5, \"more\", as.character(n))) |&gt; \n  group_by(my_year) |&gt; \n  mutate(total_races = sum(n)) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(my_year, total_races))  +\n  geom_col(aes(fill = fct_rev(n_category)), position = \"fill\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(vars(gender)) \n\n\n\n\n\n\nPace per mile\nWe want to calculate a value for each runner’s pace (i.e. minute_miles). We have to create and convert a character data-type of the time variable into a numeric floating point (or dbl) data-type so that we can calculate pace (i.e. race-minutes divided by distance.) These data transformations required a lot of manipulation as I was thinking through my goal. I could optimized this code, perhaps. However it works and I’ve got other things to do. Do I care if the CPU works extra hard? No, not in this case.\n\nmy_df_joined |&gt; \n  mutate(time_hms = str_remove_all(time, \"[HMS]\"), .after = time) |&gt; \n  mutate(time_hms = str_replace_all(time_hms, \"\\\\s\", \":\")) |&gt; \n  separate(time_hms, into = c(\"h\", \"m\", \"s\"), sep = \":\") |&gt; \n  mutate(bigminutes = (\n    (as.numeric(h) * 60) + as.numeric(m) + (as.numeric(s) * .75)\n    ), .before = h) |&gt; \n  mutate(pace = bigminutes / distance, .before = bigminutes) |&gt; \n  drop_na(pace, distance, my_year) |&gt; \n  filter(distance &gt; 0,\n         pace &gt; 0) |&gt; \n  group_by(my_year, gender) |&gt;  \n  summarise(avg_pace = mean(pace), max_pace = max(pace), min_pace = min(pace)) |&gt; \n  pivot_longer(-c(my_year, gender), names_to = \"pace_type\")  |&gt; \n  separate(value, into = c(\"m\", \"s\"), remove = FALSE) |&gt; \n  mutate(h = \"00\", .before = m) |&gt; \n  mutate(m = str_pad(as.numeric(m), width = 2, pad = \"0\")) |&gt; \n  mutate(s = str_pad(round(as.numeric(str_c(\"0.\",s)) * 60), width = 2, pad = \"0\")) |&gt; \n  unite(minute_miles, h:s, sep = \":\") |&gt; \n  mutate(minute_miles = hms::as_hms(minute_miles)) |&gt; \n  # drop_na(gender) |&gt; \n  ggplot(aes(my_year, minute_miles)) +\n  geom_line(aes(color = pace_type), size = 1) +\n  scale_color_brewer(palette = \"Dark2\") +\n  theme_classic() +\n  facet_wrap(vars(gender))\n\n`summarise()` has grouped output by 'my_year'. You can override using the\n`.groups` argument.\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nAge trends\nIn this code-chunk we use a {ggplot2} function, cut_width(), to generate rough categories by age. dplyr::case_when() is a more thorough and sophisticated way to make some cuts in my data, but ggplot2::cut_width() works well for a quick visualization.\nNote the use of labels, scales, themes, and guides in the last visualization. A good plot will need refinement with some or all of these functions.\n\nmy_df_joined |&gt; \n  mutate(age_cut = cut_width(age, width = 10, boundary = 0), .after = age) |&gt; \n  count(age_cut, gender, sort = TRUE)\n\n\n\n  \n\n\nmy_df_joined |&gt; \n  filter(age &lt; 80) |&gt; \n  drop_na(gender) |&gt; \n  ggplot(aes(y = cut_width(age, width = 10, boundary = 0))) +\n  geom_bar(aes(fill = gender)) +\n  facet_wrap(vars(gender))\n\n\n\nmy_df_joined |&gt; \n  filter(age &lt; 70, age &gt;= 20) |&gt;\n  drop_na(gender) |&gt; \n  ggplot(aes(my_year)) +\n  geom_bar(aes(fill = fct_rev(cut_width(age, width = 10, boundary = 0))), position = \"fill\") +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(fill = \"Age\", title = \"Age distribution of ultra runners\",\n       caption = \"Source: ITRA &gt; Benjamin Nowak &gt; Tidy Tuesday\",\n       x = NULL, y = NULL) +\n  theme_classic() +\n  theme(legend.position = \"top\", plot.title.position = \"plot\") + \n  guides(fill = guide_legend(reverse = TRUE))"
  },
  {
    "objectID": "widgets.html",
    "href": "widgets.html",
    "title": "Easy interactive viz",
    "section": "",
    "text": "The ggplotly function of the {plotly} package (Sievert 2020) is an example implementation of HTML Widgets for R. Beyond {plotly} there are many widgets to choose from. Widgets can be chained together via {crosstalk} to support cross-widget interactions such as linked brushing and filtering. The HTML widgets approach is simpler to implement than Shiny and delivers powerful interactive visualizations to your audience."
  },
  {
    "objectID": "widgets.html#examples",
    "href": "widgets.html#examples",
    "title": "Easy interactive viz",
    "section": "Examples",
    "text": "Examples"
  },
  {
    "objectID": "widgets.html#plotly",
    "href": "widgets.html#plotly",
    "title": "Easy interactive viz",
    "section": "plotly",
    "text": "plotly\nIn the previous ggplot2 section on interactivity, we briefly introduced an example interactive bar chart using ggplotly to transform a {ggplot2} object. {plotly} has its own rich syntax and can do more than make interactive ggplot2 plots. Here’s another quick example. Follow the links, above, to more documentation and examples. Try the examples below.\n\nlibrary(dplyr)\nlibrary(plotly)\n\nmy_df &lt;- starwars |&gt; filter(mass &lt; 500) \n\nplot_ly(my_df, x = my_df$height, y = my_df$mass, \n        text = my_df$name,\n        mode = \"markers\", color = my_df$gender)"
  },
  {
    "objectID": "widgets.html#dygraphs",
    "href": "widgets.html#dygraphs",
    "title": "Easy interactive viz",
    "section": "dygraphs",
    "text": "dygraphs\nAnother HTML widget is {dygraph} for time-series data\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %&gt;% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))"
  },
  {
    "objectID": "widgets.html#crosstalk-and-leaflet",
    "href": "widgets.html#crosstalk-and-leaflet",
    "title": "Easy interactive viz",
    "section": "crosstalk and leaflet",
    "text": "crosstalk and leaflet\nUsing {crosstalk} for cross widget interaction (linked brushing and filtering) between two HTML widgets. In this example we link {leaflet} and {DT} widgets\n\n\n\nCode\nlibrary(crosstalk)\nlibrary(leaflet)\nlibrary(DT)\n\n# Wrap data frame in SharedData\nsd &lt;- SharedData$new(quakes[sample(nrow(quakes), 100),])\n\n# Create a filter input\nfilter_slider(\"mag\", \"Magnitude\", sd, column=~mag, step=0.1, width=250)\n\n\n\nMagnitude\n\n\n\n\n\nCode\n# Use SharedData like a dataframe with Crosstalk-enabled widgets\nbscols(\n  leaflet(sd) %&gt;% addTiles() %&gt;% addMarkers(),\n  datatable(sd, extensions=\"Scroller\", style=\"bootstrap\", class=\"compact\", width=\"100%\",\n    options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))\n)"
  },
  {
    "objectID": "widgets.html#reactable",
    "href": "widgets.html#reactable",
    "title": "Easy interactive viz",
    "section": "reactable",
    "text": "reactable\nOr use {reactable} another easy-to-use interactive data tables package.\n\n\nlibrary(reactable)\n\nggplot2::mpg |&gt; \n  slice_head(n = 20) |&gt; \n  reactable(searchable = TRUE, minRows = 10)"
  },
  {
    "objectID": "widgets.html#more",
    "href": "widgets.html#more",
    "title": "Easy interactive viz",
    "section": "More",
    "text": "More\nSee more HTML widgets at the HTML Widgets for R gallery.\nIn the next section we’ll introduce a very powerful interactive tool that works with Quarto: ObservableJS."
  }
]